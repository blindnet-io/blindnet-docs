const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":".md-typeset h1, .md-content__button { display: none; } Home # Quick start How it works Glossary Q&A Guides # Introduction Installation Managing users and access Encrypting data Decrypting data Api reference # Client SDK # JavaScript Server SDK # PHP Node.js Troubleshooting # Error list","title":"Home"},{"location":"index.html#home","text":"Quick start How it works Glossary Q&A","title":"Home"},{"location":"index.html#guides","text":"Introduction Installation Managing users and access Encrypting data Decrypting data","title":"Guides"},{"location":"index.html#api_reference","text":"","title":"Api reference"},{"location":"index.html#client_sdk","text":"JavaScript","title":"Client SDK"},{"location":"index.html#server_sdk","text":"PHP Node.js","title":"Server SDK"},{"location":"index.html#troubleshooting","text":"Error list","title":"Troubleshooting"},{"location":"quickstart.html","text":"Try out blindnet SDK quickly and easily. Note While reading this quickstart guide you can download and follow the source code for a simple React front-end app with integrated blindnet client SDK from here . In this quickstart guide, you will learn how to encrypt and decrypt a file using the blindnet client SDK . We assume two users exist - a user we know, Alice , and an anonymous user Bob . For the sake of simplicity we\u2019ll act as both Alice and Bob. We will register a known user Alice to blindnet, encrypt a file to her as an anonymous user Bob, and then decrypt the file as Alice. You will learn how to: set-up the blindnet SDK register Alice to blindnet encrypt a file as Bob decrypt a file as Alice Before you start # Obtain blindnet authentication data. To authenticate to blindnet, your application needs the application id and application key . Application key is a cryptographic secret key which is used to sign the authentication tokens and must be kept secret (and accessible by your server). You can get the application id and application key using the blindnet dashboard after you create a new application. Note For the sake of simplicity, you can skip creating a new application and just use the following application id and key id: 3544e7cd-64a9-41b7-88dc-397bfdaeeaf3 key: zB5IiU0xzkVdsH4NMXxrF90ZISL5kJnTHlt7h/Wbi/qVhch7Fw8J5AQ5j2PazaG5q114uApZRH4X1/kTKVx0Cw== Be sure not to use those in production environments! STEP 1 : Set-up the SDK # In this guide, only the client SDK is needed. To generate the authentication tokens, we will use a dedicated client library . In your production environment, you will need both client and server SDKs and generate the tokens on the server side. Installation # To install the blindnet SDK and the token generator javascript npm i -S @blindnet/sdk-javascript @blindnet/token-generator or yarn add @blindnet/sdk-javascript @blindnet/token-generator Import # Import the library to your project with javascript 1 2 import { Blindnet } from '@blindnet/sdk-javascript' import { createTempUserToken , createUserToken } from '@blindnet/token-generator' Generate a user token for Alice # Tokens are used to authenticate the users of your application to blindnet. They can be used multiple times and should be regenerated when they expire using the same method. Warning We use the token generation library to generate the tokens. It should be only used for testing purposes and tokens should be generated on the server in production environment, after your user is authenticated. Use the application id and key you obtained in Before you start section. JavaScript 1 2 3 4 5 const appId = \u2018 your_application_id \u2019 const appKey = \u2018 your_application_key \u2019 const aliceId = \u2018 alice \u2019 const groupId = test - group \u2019 const token = await createUserToken ( aliceId , groupId , appId , appKey ) Specify the testing endpoint and initialize the library for Alice JavaScript 1 2 const endpoint = ' https : //test.blindnet.io\u2019 const blindnet = Blindnet . init ( token , endpoint ) Connect Alice to blindnet # Blindnet can encrypt files with a particular destination (list of users or a user group ) in mind. So in order to start encrypting, you first need to have some users (Alice in this case) that you\u2019ve connected to blindnet. To connect a user to blindnet, a secret value has to be provided. That value must only be known by the user (e.g. user's password). In that case, it\u2019s important not to use the same value to log-into your system and connect to blindnet for which we provide a method deriveSecrets . JavaScript 1 2 const { appSecret , blindnetSecret } = await Blindnet . deriveSecrets ( secret ) await blindnet . connect ( blindnetSecret ) Note You can use appSecret as a password for the user to log-into your system. STEP 2 : Encrypt a file # After Alice has connected to blindnet, data can be encrypted for her. We will simulate an anonymous user Bob encrypting a file for Alice. Initialize SDK for Bob # You need to initialize the library with the temporary token in order to encrypt the data. Pass the ids of the users you want to encrypt a file to. JavaScript 1 2 const token = await createTempUserToken ([ aliceId ], appId , appKey ) const blindnet = Blindnet . init ( token , endpoint ) Encrypt a file # Obtain a file from the <input type=\"file\" id=\"file-pick> HTML element and pass it to the encrypt method. JavaScript 1 2 const file = document . getElementById ( \u2018 file - pick \u2019 ). files [ 0 ] const { encryptedData } = await blindnet . encrypt ( file ) encryptedData should be stored by you. STEP 3 : Decrypt a file # To decrypt a file, you only need encryptedData . JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) There is a convenient library to save files file-saver . 1 saveAs ( data , metadata . dataType . name )","title":"Quick start"},{"location":"quickstart.html#before_you_start","text":"Obtain blindnet authentication data. To authenticate to blindnet, your application needs the application id and application key . Application key is a cryptographic secret key which is used to sign the authentication tokens and must be kept secret (and accessible by your server). You can get the application id and application key using the blindnet dashboard after you create a new application. Note For the sake of simplicity, you can skip creating a new application and just use the following application id and key id: 3544e7cd-64a9-41b7-88dc-397bfdaeeaf3 key: zB5IiU0xzkVdsH4NMXxrF90ZISL5kJnTHlt7h/Wbi/qVhch7Fw8J5AQ5j2PazaG5q114uApZRH4X1/kTKVx0Cw== Be sure not to use those in production environments!","title":"Before you start"},{"location":"quickstart.html#step_1_set-up_the_sdk","text":"In this guide, only the client SDK is needed. To generate the authentication tokens, we will use a dedicated client library . In your production environment, you will need both client and server SDKs and generate the tokens on the server side.","title":"STEP 1: Set-up the SDK"},{"location":"quickstart.html#installation","text":"To install the blindnet SDK and the token generator javascript npm i -S @blindnet/sdk-javascript @blindnet/token-generator or yarn add @blindnet/sdk-javascript @blindnet/token-generator","title":"Installation"},{"location":"quickstart.html#import","text":"Import the library to your project with javascript 1 2 import { Blindnet } from '@blindnet/sdk-javascript' import { createTempUserToken , createUserToken } from '@blindnet/token-generator'","title":"Import"},{"location":"quickstart.html#generate_a_user_token_for_alice","text":"Tokens are used to authenticate the users of your application to blindnet. They can be used multiple times and should be regenerated when they expire using the same method. Warning We use the token generation library to generate the tokens. It should be only used for testing purposes and tokens should be generated on the server in production environment, after your user is authenticated. Use the application id and key you obtained in Before you start section. JavaScript 1 2 3 4 5 const appId = \u2018 your_application_id \u2019 const appKey = \u2018 your_application_key \u2019 const aliceId = \u2018 alice \u2019 const groupId = test - group \u2019 const token = await createUserToken ( aliceId , groupId , appId , appKey ) Specify the testing endpoint and initialize the library for Alice JavaScript 1 2 const endpoint = ' https : //test.blindnet.io\u2019 const blindnet = Blindnet . init ( token , endpoint )","title":"Generate a user token for Alice"},{"location":"quickstart.html#connect_alice_to_blindnet","text":"Blindnet can encrypt files with a particular destination (list of users or a user group ) in mind. So in order to start encrypting, you first need to have some users (Alice in this case) that you\u2019ve connected to blindnet. To connect a user to blindnet, a secret value has to be provided. That value must only be known by the user (e.g. user's password). In that case, it\u2019s important not to use the same value to log-into your system and connect to blindnet for which we provide a method deriveSecrets . JavaScript 1 2 const { appSecret , blindnetSecret } = await Blindnet . deriveSecrets ( secret ) await blindnet . connect ( blindnetSecret ) Note You can use appSecret as a password for the user to log-into your system.","title":"Connect Alice to blindnet"},{"location":"quickstart.html#step_2_encrypt_a_file","text":"After Alice has connected to blindnet, data can be encrypted for her. We will simulate an anonymous user Bob encrypting a file for Alice.","title":"STEP 2: Encrypt a file"},{"location":"quickstart.html#initialize_sdk_for_bob","text":"You need to initialize the library with the temporary token in order to encrypt the data. Pass the ids of the users you want to encrypt a file to. JavaScript 1 2 const token = await createTempUserToken ([ aliceId ], appId , appKey ) const blindnet = Blindnet . init ( token , endpoint )","title":"Initialize SDK for Bob"},{"location":"quickstart.html#encrypt_a_file","text":"Obtain a file from the <input type=\"file\" id=\"file-pick> HTML element and pass it to the encrypt method. JavaScript 1 2 const file = document . getElementById ( \u2018 file - pick \u2019 ). files [ 0 ] const { encryptedData } = await blindnet . encrypt ( file ) encryptedData should be stored by you.","title":"Encrypt a file"},{"location":"quickstart.html#step_3_decrypt_a_file","text":"To decrypt a file, you only need encryptedData . JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) There is a convenient library to save files file-saver . 1 saveAs ( data , metadata . dataType . name )","title":"STEP 3: Decrypt a file"},{"location":"api_reference/index.html","text":"Client SDK # Javascript Server SDK # PHP Node.js","title":"Api reference"},{"location":"api_reference/index.html#client_sdk","text":"Javascript","title":"Client SDK"},{"location":"api_reference/index.html#server_sdk","text":"PHP Node.js","title":"Server SDK"},{"location":"api_reference/client/javascript/0.1.4.html","text":"Installation # Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > Imports # If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class. Initialization # Blindnet SDK must be initialized before you can use it (with the exception of some static methods, e.g. secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet Parameters # name type required description token string true Authentication token generated by server SDK. endpoint string false URL of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io . Return type # Blindnet (An instance which you use to call SDK methods.) 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret ) Refreshing the session # After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void Parameters # name type required description token string true Authentication token generated by server SDK. Return type # void Logging-in # A user must be logged-into to blindnet before using any Blindnet api methods (with the of some static methods or when encrypting ). The user both registers and later authenticates in blindnet with the method connect . function connect ( secret : string ) : Promise < void > Parameters # name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys . Usually, should be derived from user\u2019s password using the deriveSecrets method. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys . Deriving secrets # User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be split into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } > Parameters # name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question. Return type # Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application. Logging-out # After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect () Changing login secret # If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void > Parameters # name type required description newSecret string true A new secret used to encrypt user\u2019s keys . oldSecret string false Current secret used to encrypt user\u2019s keys . If the user is currently not logged into blindnet, oldSecret should be provided into the method changeSecret . Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet. Encrypting # function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any } ) : Promise < { dataId : string , encryptedData : ArrayBuffer } > Parameters # name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Multiple types are supported. metadata { [key: string]: any } false Metadata in JSON format. Return type # Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a data keys using the Server SDK . encryptedData can be encoded using toBase64 and toHex methods. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data or metadata has a wrong type. NotEncryptabeError There are no users to encrypt the data to. Encrypting values # This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } > Parameters # name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings. Return type # Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a data keys using the Server SDK . encryptedData is a JavaScript object with encrypted values, encoded to hex string. Object keys are left in plain text. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data is not the expected type. NotEncryptabeError There are no users to encrypt the data to. Decrypting # function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; }} > Parameters # name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (the result of the encrypt method). If it was encoded , it can be decoded using fromBase64 or fromHex . Return type # Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; }}> type DataType = | { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata . Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Decrypting values # This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string } ) : Promise < { data : { [ key : string ] : string } } > Parameters # name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method. Return type # Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Giving access to a user # A user can give access to all the encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void > Parameters # name type required description userId string true Id of a user to whom access is being given. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet. Helper methods # Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util Encoding # Encrypted data (result of the encrypt method) can be encoded using the following methods: Encode to base64 string # function toBase64 ( encryptedData : ArrayBuffer ) : string Encode to hexadecimal string # function toHex ( encryptedData : ArrayBuffer ) : string Decoding # A base64 or hex encoded string can be decoded into ArrayBuffer (and then passed to the decrypt method) using the following methods: Decode from base64 string # function fromBase64 ( encoded : string ) : ArrayBuffer Decode from hexadecimal string # function fromHex ( encoded : string ) : ArrayBuffer","title":"v0.1.4"},{"location":"api_reference/client/javascript/0.1.4.html#installation","text":"Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script >","title":"Installation"},{"location":"api_reference/client/javascript/0.1.4.html#imports","text":"If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class.","title":"Imports"},{"location":"api_reference/client/javascript/0.1.4.html#initialization","text":"Blindnet SDK must be initialized before you can use it (with the exception of some static methods, e.g. secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet","title":"Initialization"},{"location":"api_reference/client/javascript/0.1.4.html#parameters","text":"name type required description token string true Authentication token generated by server SDK. endpoint string false URL of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io .","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type","text":"Blindnet (An instance which you use to call SDK methods.) 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret )","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#refreshing_the_session","text":"After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void","title":"Refreshing the session"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_1","text":"name type required description token string true Authentication token generated by server SDK.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_1","text":"void","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#logging-in","text":"A user must be logged-into to blindnet before using any Blindnet api methods (with the of some static methods or when encrypting ). The user both registers and later authenticates in blindnet with the method connect . function connect ( secret : string ) : Promise < void >","title":"Logging-in"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_2","text":"name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys . Usually, should be derived from user\u2019s password using the deriveSecrets method.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_2","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#errors","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys .","title":"Errors"},{"location":"api_reference/client/javascript/0.1.4.html#deriving_secrets","text":"User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be split into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } >","title":"Deriving secrets"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_3","text":"name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_3","text":"Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#logging-out","text":"After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect ()","title":"Logging-out"},{"location":"api_reference/client/javascript/0.1.4.html#changing_login_secret","text":"If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void >","title":"Changing login secret"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_4","text":"name type required description newSecret string true A new secret used to encrypt user\u2019s keys . oldSecret string false Current secret used to encrypt user\u2019s keys . If the user is currently not logged into blindnet, oldSecret should be provided into the method changeSecret .","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_4","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#errors_1","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.4.html#encrypting","text":"function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any } ) : Promise < { dataId : string , encryptedData : ArrayBuffer } >","title":"Encrypting"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_5","text":"name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Multiple types are supported. metadata { [key: string]: any } false Metadata in JSON format.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_5","text":"Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a data keys using the Server SDK . encryptedData can be encoded using toBase64 and toHex methods.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#errors_2","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data or metadata has a wrong type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.4.html#encrypting_values","text":"This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } >","title":"Encrypting values"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_6","text":"name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_6","text":"Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a data keys using the Server SDK . encryptedData is a JavaScript object with encrypted values, encoded to hex string. Object keys are left in plain text.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#errors_3","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data is not the expected type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.4.html#decrypting","text":"function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; }} >","title":"Decrypting"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_7","text":"name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (the result of the encrypt method). If it was encoded , it can be decoded using fromBase64 or fromHex .","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_7","text":"Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; }}> type DataType = | { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata .","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#errors_4","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.4.html#decrypting_values","text":"This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string } ) : Promise < { data : { [ key : string ] : string } } >","title":"Decrypting values"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_8","text":"name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_8","text":"Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#errors_5","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.4.html#giving_access_to_a_user","text":"A user can give access to all the encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void >","title":"Giving access to a user"},{"location":"api_reference/client/javascript/0.1.4.html#parameters_9","text":"name type required description userId string true Id of a user to whom access is being given.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.4.html#return_type_9","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.4.html#errors_6","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.4.html#helper_methods","text":"Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util","title":"Helper methods"},{"location":"api_reference/client/javascript/0.1.4.html#encoding","text":"Encrypted data (result of the encrypt method) can be encoded using the following methods:","title":"Encoding"},{"location":"api_reference/client/javascript/0.1.4.html#encode_to_base64_string","text":"function toBase64 ( encryptedData : ArrayBuffer ) : string","title":"Encode to base64 string"},{"location":"api_reference/client/javascript/0.1.4.html#encode_to_hexadecimal_string","text":"function toHex ( encryptedData : ArrayBuffer ) : string","title":"Encode to hexadecimal string"},{"location":"api_reference/client/javascript/0.1.4.html#decoding","text":"A base64 or hex encoded string can be decoded into ArrayBuffer (and then passed to the decrypt method) using the following methods:","title":"Decoding"},{"location":"api_reference/client/javascript/0.1.4.html#decode_from_base64_string","text":"function fromBase64 ( encoded : string ) : ArrayBuffer","title":"Decode from base64 string"},{"location":"api_reference/client/javascript/0.1.4.html#decode_from_hexadecimal_string","text":"function fromHex ( encoded : string ) : ArrayBuffer","title":"Decode from hexadecimal string"},{"location":"api_reference/client/javascript/latest.html","text":"Installation # Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > Imports # If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class. Initialization # Blindnet SDK must be initialized before you can use it (with the exception of some static methods, e.g. secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet Parameters # name type required description token string true Authentication token generated by server SDK. endpoint string false URL of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io . Return type # Blindnet (An instance which you use to call SDK methods.) 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret ) Refreshing the session # After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void Parameters # name type required description token string true Authentication token generated by server SDK. Return type # void Logging-in # A user must be logged-into to blindnet before using any Blindnet api methods (with the of some static methods or when encrypting ). The user both registers and later authenticates in blindnet with the method connect . function connect ( secret : string ) : Promise < void > Parameters # name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys . Usually, should be derived from user\u2019s password using the deriveSecrets method. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys . Deriving secrets # User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be split into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } > Parameters # name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question. Return type # Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application. Logging-out # After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect () Changing login secret # If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void > Parameters # name type required description newSecret string true A new secret used to encrypt user\u2019s keys . oldSecret string false Current secret used to encrypt user\u2019s keys . If the user is currently not logged into blindnet, oldSecret should be provided into the method changeSecret . Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet. Encrypting # function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any } ) : Promise < { dataId : string , encryptedData : ArrayBuffer } > Parameters # name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Multiple types are supported. metadata { [key: string]: any } false Metadata in JSON format. Return type # Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a data keys using the Server SDK . encryptedData can be encoded using toBase64 and toHex methods. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data or metadata has a wrong type. NotEncryptabeError There are no users to encrypt the data to. Encrypting values # This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } > Parameters # name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings. Return type # Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a data keys using the Server SDK . encryptedData is a JavaScript object with encrypted values, encoded to hex string. Object keys are left in plain text. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data is not the expected type. NotEncryptabeError There are no users to encrypt the data to. Decrypting # function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; }} > Parameters # name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (the result of the encrypt method). If it was encoded , it can be decoded using fromBase64 or fromHex . Return type # Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; }}> type DataType = | { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata . Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Decrypting values # This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string } ) : Promise < { data : { [ key : string ] : string } } > Parameters # name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method. Return type # Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Giving access to a user # A user can give access to all the encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void > Parameters # name type required description userId string true Id of a user to whom access is being given. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet. Helper methods # Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util Encoding # Encrypted data (result of the encrypt method) can be encoded using the following methods: Encode to base64 string # function toBase64 ( encryptedData : ArrayBuffer ) : string Encode to hexadecimal string # function toHex ( encryptedData : ArrayBuffer ) : string Decoding # A base64 or hex encoded string can be decoded into ArrayBuffer (and then passed to the decrypt method) using the following methods: Decode from base64 string # function fromBase64 ( encoded : string ) : ArrayBuffer Decode from hexadecimal string # function fromHex ( encoded : string ) : ArrayBuffer","title":"latest"},{"location":"api_reference/client/javascript/latest.html#installation","text":"Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script >","title":"Installation"},{"location":"api_reference/client/javascript/latest.html#imports","text":"If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class.","title":"Imports"},{"location":"api_reference/client/javascript/latest.html#initialization","text":"Blindnet SDK must be initialized before you can use it (with the exception of some static methods, e.g. secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet","title":"Initialization"},{"location":"api_reference/client/javascript/latest.html#parameters","text":"name type required description token string true Authentication token generated by server SDK. endpoint string false URL of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io .","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type","text":"Blindnet (An instance which you use to call SDK methods.) 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret )","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#refreshing_the_session","text":"After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void","title":"Refreshing the session"},{"location":"api_reference/client/javascript/latest.html#parameters_1","text":"name type required description token string true Authentication token generated by server SDK.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_1","text":"void","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#logging-in","text":"A user must be logged-into to blindnet before using any Blindnet api methods (with the of some static methods or when encrypting ). The user both registers and later authenticates in blindnet with the method connect . function connect ( secret : string ) : Promise < void >","title":"Logging-in"},{"location":"api_reference/client/javascript/latest.html#parameters_2","text":"name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys . Usually, should be derived from user\u2019s password using the deriveSecrets method.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_2","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys .","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#deriving_secrets","text":"User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be split into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } >","title":"Deriving secrets"},{"location":"api_reference/client/javascript/latest.html#parameters_3","text":"name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_3","text":"Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#logging-out","text":"After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect ()","title":"Logging-out"},{"location":"api_reference/client/javascript/latest.html#changing_login_secret","text":"If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void >","title":"Changing login secret"},{"location":"api_reference/client/javascript/latest.html#parameters_4","text":"name type required description newSecret string true A new secret used to encrypt user\u2019s keys . oldSecret string false Current secret used to encrypt user\u2019s keys . If the user is currently not logged into blindnet, oldSecret should be provided into the method changeSecret .","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_4","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_1","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#encrypting","text":"function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any } ) : Promise < { dataId : string , encryptedData : ArrayBuffer } >","title":"Encrypting"},{"location":"api_reference/client/javascript/latest.html#parameters_5","text":"name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Multiple types are supported. metadata { [key: string]: any } false Metadata in JSON format.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_5","text":"Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a data keys using the Server SDK . encryptedData can be encoded using toBase64 and toHex methods.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_2","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data or metadata has a wrong type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#encrypting_values","text":"This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } >","title":"Encrypting values"},{"location":"api_reference/client/javascript/latest.html#parameters_6","text":"name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_6","text":"Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a data keys using the Server SDK . encryptedData is a JavaScript object with encrypted values, encoded to hex string. Object keys are left in plain text.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_3","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError data is not the expected type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#decrypting","text":"function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; }} >","title":"Decrypting"},{"location":"api_reference/client/javascript/latest.html#parameters_7","text":"name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (the result of the encrypt method). If it was encoded , it can be decoded using fromBase64 or fromHex .","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_7","text":"Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; }}> type DataType = | { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata .","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_4","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#decrypting_values","text":"This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string } ) : Promise < { data : { [ key : string ] : string } } >","title":"Decrypting values"},{"location":"api_reference/client/javascript/latest.html#parameters_8","text":"name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_8","text":"Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_5","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#giving_access_to_a_user","text":"A user can give access to all the encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void >","title":"Giving access to a user"},{"location":"api_reference/client/javascript/latest.html#parameters_9","text":"name type required description userId string true Id of a user to whom access is being given.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_9","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_6","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#helper_methods","text":"Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util","title":"Helper methods"},{"location":"api_reference/client/javascript/latest.html#encoding","text":"Encrypted data (result of the encrypt method) can be encoded using the following methods:","title":"Encoding"},{"location":"api_reference/client/javascript/latest.html#encode_to_base64_string","text":"function toBase64 ( encryptedData : ArrayBuffer ) : string","title":"Encode to base64 string"},{"location":"api_reference/client/javascript/latest.html#encode_to_hexadecimal_string","text":"function toHex ( encryptedData : ArrayBuffer ) : string","title":"Encode to hexadecimal string"},{"location":"api_reference/client/javascript/latest.html#decoding","text":"A base64 or hex encoded string can be decoded into ArrayBuffer (and then passed to the decrypt method) using the following methods:","title":"Decoding"},{"location":"api_reference/client/javascript/latest.html#decode_from_base64_string","text":"function fromBase64 ( encoded : string ) : ArrayBuffer","title":"Decode from base64 string"},{"location":"api_reference/client/javascript/latest.html#decode_from_hexadecimal_string","text":"function fromHex ( encoded : string ) : ArrayBuffer","title":"Decode from hexadecimal string"},{"location":"api_reference/server/node.js/0.0.2.html","text":"Installation # Pick one of the following methods to install the SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-node yarn Run the following command in your terminal. yarn add @blindnet/sdk-node Imports # const Blindnet = require ( '@blindnet/sdk-node' ) Initialization # Blindnet SDK must be initialized before you can use it (with the exception of the static token generation methods). static async function init ( appKey : string , appId : string , endpoint? : string ) : Blindnet Parameters # name type required description appKey string true Application private key appId string true Application ID endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io . Return type # Blindnet (An instance which you use to call SDK methods.) Creating user tokens # Two types of tokens are needed: tokens for registered users and temporary tokens . Create a token for a registered user # These tokens are used by the registered users to invoke SDK methods. function createUserToken ( userId : string , groupId? : string ) : Promise < string > Parameters # name type required description userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs. Return type # Promise<string> A static method can also be used. static function createUserToken ( appKey : string , appId : string , userId : string , groupId? : string ) : Promise < string > Parameters # name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs. Return type # Promise<string> Create a temporary token # Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all specified users or users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( param : string | string []) : Promise < string > Parameters # name type required description param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted. Return type # Promise<string> A static method can also be used. static function createTempUserToken ( appKey : string , appId : string , param : string | string [] ) : Promise < string > Parameters # name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted. Return type # Promise<string> Deleting data keys # Deletes the encrypted data key from blindnet. async function forgetData ( dataId : string ) : Promise < void > Parameters # name type required description dataId string true ID of a data to be deleted. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server. Revoking access to users # Deletes all encrypted data keys of a given user. async function revokeAccess ( userId : string ) : Promise < void > Parameters # name type required description userId string true ID of a user to revoke access to the encrypted data. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server. Deleting users # Deletes a user from blindnet. async function forgetUser ( userId : string ) : Promise < void > Parameters # name type required description userId string true ID of a user to delete. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server. Deleting user groups # Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . async function forgetGroup ( groupId : string ) : Promise < void > Parameters # name type required description groupId string true ID of a group to delete. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"v0.0.2"},{"location":"api_reference/server/node.js/0.0.2.html#installation","text":"Pick one of the following methods to install the SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-node yarn Run the following command in your terminal. yarn add @blindnet/sdk-node","title":"Installation"},{"location":"api_reference/server/node.js/0.0.2.html#imports","text":"const Blindnet = require ( '@blindnet/sdk-node' )","title":"Imports"},{"location":"api_reference/server/node.js/0.0.2.html#initialization","text":"Blindnet SDK must be initialized before you can use it (with the exception of the static token generation methods). static async function init ( appKey : string , appId : string , endpoint? : string ) : Blindnet","title":"Initialization"},{"location":"api_reference/server/node.js/0.0.2.html#parameters","text":"name type required description appKey string true Application private key appId string true Application ID endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io .","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type","text":"Blindnet (An instance which you use to call SDK methods.)","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#creating_user_tokens","text":"Two types of tokens are needed: tokens for registered users and temporary tokens .","title":"Creating user tokens"},{"location":"api_reference/server/node.js/0.0.2.html#create_a_token_for_a_registered_user","text":"These tokens are used by the registered users to invoke SDK methods. function createUserToken ( userId : string , groupId? : string ) : Promise < string >","title":"Create a token for a registered user"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_1","text":"name type required description userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_1","text":"Promise<string> A static method can also be used. static function createUserToken ( appKey : string , appId : string , userId : string , groupId? : string ) : Promise < string >","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_2","text":"name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_2","text":"Promise<string>","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#create_a_temporary_token","text":"Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all specified users or users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( param : string | string []) : Promise < string >","title":"Create a temporary token"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_3","text":"name type required description param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_3","text":"Promise<string> A static method can also be used. static function createTempUserToken ( appKey : string , appId : string , param : string | string [] ) : Promise < string >","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_4","text":"name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_4","text":"Promise<string>","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#deleting_data_keys","text":"Deletes the encrypted data key from blindnet. async function forgetData ( dataId : string ) : Promise < void >","title":"Deleting data keys"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_5","text":"name type required description dataId string true ID of a data to be deleted.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_5","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#errors","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/node.js/0.0.2.html#revoking_access_to_users","text":"Deletes all encrypted data keys of a given user. async function revokeAccess ( userId : string ) : Promise < void >","title":"Revoking access to users"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_6","text":"name type required description userId string true ID of a user to revoke access to the encrypted data.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_6","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#errors_1","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/node.js/0.0.2.html#deleting_users","text":"Deletes a user from blindnet. async function forgetUser ( userId : string ) : Promise < void >","title":"Deleting users"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_7","text":"name type required description userId string true ID of a user to delete.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_7","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#errors_2","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/node.js/0.0.2.html#deleting_user_groups","text":"Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . async function forgetGroup ( groupId : string ) : Promise < void >","title":"Deleting user groups"},{"location":"api_reference/server/node.js/0.0.2.html#parameters_8","text":"name type required description groupId string true ID of a group to delete.","title":"Parameters"},{"location":"api_reference/server/node.js/0.0.2.html#return_type_8","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/0.0.2.html#errors_3","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/node.js/latest.html","text":"Installation # Pick one of the following methods to install the SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-node yarn Run the following command in your terminal. yarn add @blindnet/sdk-node Imports # const Blindnet = require ( '@blindnet/sdk-node' ) Initialization # Blindnet SDK must be initialized before you can use it (with the exception of the static token generation methods). static async function init ( appKey : string , appId : string , endpoint? : string ) : Blindnet Parameters # name type required description appKey string true Application private key appId string true Application ID endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io . Return type # Blindnet (An instance which you use to call SDK methods.) Creating user tokens # Two types of tokens are needed: tokens for registered users and temporary tokens . Create a token for a registered user # These tokens are used by the registered users to invoke SDK methods. function createUserToken ( userId : string , groupId? : string ) : Promise < string > Parameters # name type required description userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs. Return type # Promise<string> A static method can also be used. static function createUserToken ( appKey : string , appId : string , userId : string , groupId? : string ) : Promise < string > Parameters # name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs. Return type # Promise<string> Create a temporary token # Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all specified users or users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( param : string | string []) : Promise < string > Parameters # name type required description param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted. Return type # Promise<string> A static method can also be used. static function createTempUserToken ( appKey : string , appId : string , param : string | string [] ) : Promise < string > Parameters # name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted. Return type # Promise<string> Deleting data keys # Deletes the encrypted data key from blindnet. async function forgetData ( dataId : string ) : Promise < void > Parameters # name type required description dataId string true ID of a data to be deleted. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server. Revoking access to users # Deletes all encrypted data keys of a given user. async function revokeAccess ( userId : string ) : Promise < void > Parameters # name type required description userId string true ID of a user to revoke access to the encrypted data. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server. Deleting users # Deletes a user from blindnet. async function forgetUser ( userId : string ) : Promise < void > Parameters # name type required description userId string true ID of a user to delete. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server. Deleting user groups # Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . async function forgetGroup ( groupId : string ) : Promise < void > Parameters # name type required description groupId string true ID of a group to delete. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"latest"},{"location":"api_reference/server/node.js/latest.html#installation","text":"Pick one of the following methods to install the SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-node yarn Run the following command in your terminal. yarn add @blindnet/sdk-node","title":"Installation"},{"location":"api_reference/server/node.js/latest.html#imports","text":"const Blindnet = require ( '@blindnet/sdk-node' )","title":"Imports"},{"location":"api_reference/server/node.js/latest.html#initialization","text":"Blindnet SDK must be initialized before you can use it (with the exception of the static token generation methods). static async function init ( appKey : string , appId : string , endpoint? : string ) : Blindnet","title":"Initialization"},{"location":"api_reference/server/node.js/latest.html#parameters","text":"name type required description appKey string true Application private key appId string true Application ID endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io .","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type","text":"Blindnet (An instance which you use to call SDK methods.)","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#creating_user_tokens","text":"Two types of tokens are needed: tokens for registered users and temporary tokens .","title":"Creating user tokens"},{"location":"api_reference/server/node.js/latest.html#create_a_token_for_a_registered_user","text":"These tokens are used by the registered users to invoke SDK methods. function createUserToken ( userId : string , groupId? : string ) : Promise < string >","title":"Create a token for a registered user"},{"location":"api_reference/server/node.js/latest.html#parameters_1","text":"name type required description userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_1","text":"Promise<string> A static method can also be used. static function createUserToken ( appKey : string , appId : string , userId : string , groupId? : string ) : Promise < string >","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#parameters_2","text":"name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . groupId string true ID of the group to which a registered user belongs.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_2","text":"Promise<string>","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#create_a_temporary_token","text":"Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all specified users or users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( param : string | string []) : Promise < string >","title":"Create a temporary token"},{"location":"api_reference/server/node.js/latest.html#parameters_3","text":"name type required description param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_3","text":"Promise<string> A static method can also be used. static function createTempUserToken ( appKey : string , appId : string , param : string | string [] ) : Promise < string >","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#parameters_4","text":"name type required description appKey string true Application private key appId string true Application ID userId string true ID of a registered user . param string | string[] true ID of the group for which the data is being encrypted OR list of IDs of users to whom the data is being encrypted.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_4","text":"Promise<string>","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#deleting_data_keys","text":"Deletes the encrypted data key from blindnet. async function forgetData ( dataId : string ) : Promise < void >","title":"Deleting data keys"},{"location":"api_reference/server/node.js/latest.html#parameters_5","text":"name type required description dataId string true ID of a data to be deleted.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_5","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#errors","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/node.js/latest.html#revoking_access_to_users","text":"Deletes all encrypted data keys of a given user. async function revokeAccess ( userId : string ) : Promise < void >","title":"Revoking access to users"},{"location":"api_reference/server/node.js/latest.html#parameters_6","text":"name type required description userId string true ID of a user to revoke access to the encrypted data.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_6","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#errors_1","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/node.js/latest.html#deleting_users","text":"Deletes a user from blindnet. async function forgetUser ( userId : string ) : Promise < void >","title":"Deleting users"},{"location":"api_reference/server/node.js/latest.html#parameters_7","text":"name type required description userId string true ID of a user to delete.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_7","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#errors_2","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/node.js/latest.html#deleting_user_groups","text":"Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . async function forgetGroup ( groupId : string ) : Promise < void >","title":"Deleting user groups"},{"location":"api_reference/server/node.js/latest.html#parameters_8","text":"name type required description groupId string true ID of a group to delete.","title":"Parameters"},{"location":"api_reference/server/node.js/latest.html#return_type_8","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/server/node.js/latest.html#errors_3","text":"type description AuthenticationError Client token has expired or is invalid. A wrong application key or application id is provided.md#creating_user_tokens){target=_blank} and call refreshToken . BlindnetServiceError Error on blindnet server.","title":"Errors"},{"location":"api_reference/server/php/0.9.2.html","text":"Installation # composer require blindnet/blindnet-sdk-php Imports # 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; Init # Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet Parameters # name type required description $appKey string true Application private key $appId string true Application ID $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io . Return type # Blindnet createTempUserToken # Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string Parameters # name type required description $groupId string true ID of the group for which the data is being encrypted. Return type # String createUserToken # Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user . $groupId string true ID of the group to which a registered user belongs. Return type # String forgetData # Deletes the encrypted data key from blindnet. function forgetData ( string $dataId ) Parameters # name type required description $dataId string true ID of a data to be deleted. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API. revokeAccess # Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to revoke access to the encrypted data. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API. forgetUser # Deletes a user from blindnet. function forgetUser ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API. forgetGroup # Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . function forgetGroup ( string $groupId ) : bool Parameters # name type required description $groupId string true ID of a group to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"v0.9.2"},{"location":"api_reference/server/php/0.9.2.html#installation","text":"composer require blindnet/blindnet-sdk-php","title":"Installation"},{"location":"api_reference/server/php/0.9.2.html#imports","text":"1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet;","title":"Imports"},{"location":"api_reference/server/php/0.9.2.html#init","text":"Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet","title":"Init"},{"location":"api_reference/server/php/0.9.2.html#parameters","text":"name type required description $appKey string true Application private key $appId string true Application ID $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io .","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type","text":"Blindnet","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#createtempusertoken","text":"Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string","title":"createTempUserToken"},{"location":"api_reference/server/php/0.9.2.html#parameters_1","text":"name type required description $groupId string true ID of the group for which the data is being encrypted.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_1","text":"String","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#createusertoken","text":"Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user . $groupId string true ID of the group to which a registered user belongs.","title":"createUserToken"},{"location":"api_reference/server/php/0.9.2.html#return_type_2","text":"String","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#forgetdata","text":"Deletes the encrypted data key from blindnet. function forgetData ( string $dataId )","title":"forgetData"},{"location":"api_reference/server/php/0.9.2.html#parameters_2","text":"name type required description $dataId string true ID of a data to be deleted.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_3","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/0.9.2.html#revokeaccess","text":"Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool","title":"revokeAccess"},{"location":"api_reference/server/php/0.9.2.html#parameters_3","text":"name type required description $userId string true ID of a user to revoke access to the encrypted data.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_4","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors_1","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/0.9.2.html#forgetuser","text":"Deletes a user from blindnet. function forgetUser ( string $userId ) : bool","title":"forgetUser"},{"location":"api_reference/server/php/0.9.2.html#parameters_4","text":"name type required description $userId string true ID of a user to delete.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_5","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors_2","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/0.9.2.html#forgetgroup","text":"Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . function forgetGroup ( string $groupId ) : bool","title":"forgetGroup"},{"location":"api_reference/server/php/0.9.2.html#parameters_5","text":"name type required description $groupId string true ID of a group to delete.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_6","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors_3","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html","text":"Installation # composer require blindnet/blindnet-sdk-php Imports # 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; Init # Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet Parameters # name type required description $appKey string true Application private key $appId string true Application ID $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io . Return type # Blindnet createTempUserToken # Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string Parameters # name type required description $groupId string true ID of the group for which the data is being encrypted. Return type # String createUserToken # Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user . $groupId string true ID of the group to which a registered user belongs. Return type # String forgetData # Deletes the encrypted data key from blindnet. function forgetData ( string $dataId ) Parameters # name type required description $dataId string true ID of a data to be deleted. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API. revokeAccess # Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to revoke access to the encrypted data. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API. forgetUser # Deletes a user from blindnet. function forgetUser ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API. forgetGroup # Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . function forgetGroup ( string $groupId ) : bool Parameters # name type required description $groupId string true ID of a group to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"latest"},{"location":"api_reference/server/php/latest.html#installation","text":"composer require blindnet/blindnet-sdk-php","title":"Installation"},{"location":"api_reference/server/php/latest.html#imports","text":"1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet;","title":"Imports"},{"location":"api_reference/server/php/latest.html#init","text":"Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet","title":"Init"},{"location":"api_reference/server/php/latest.html#parameters","text":"name type required description $appKey string true Application private key $appId string true Application ID $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io .","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type","text":"Blindnet","title":"Return type"},{"location":"api_reference/server/php/latest.html#createtempusertoken","text":"Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data , all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string","title":"createTempUserToken"},{"location":"api_reference/server/php/latest.html#parameters_1","text":"name type required description $groupId string true ID of the group for which the data is being encrypted.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_1","text":"String","title":"Return type"},{"location":"api_reference/server/php/latest.html#createusertoken","text":"Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user . $groupId string true ID of the group to which a registered user belongs.","title":"createUserToken"},{"location":"api_reference/server/php/latest.html#return_type_2","text":"String","title":"Return type"},{"location":"api_reference/server/php/latest.html#forgetdata","text":"Deletes the encrypted data key from blindnet. function forgetData ( string $dataId )","title":"forgetData"},{"location":"api_reference/server/php/latest.html#parameters_2","text":"name type required description $dataId string true ID of a data to be deleted.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_3","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html#revokeaccess","text":"Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool","title":"revokeAccess"},{"location":"api_reference/server/php/latest.html#parameters_3","text":"name type required description $userId string true ID of a user to revoke access to the encrypted data.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_4","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors_1","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html#forgetuser","text":"Deletes a user from blindnet. function forgetUser ( string $userId ) : bool","title":"forgetUser"},{"location":"api_reference/server/php/latest.html#parameters_4","text":"name type required description $userId string true ID of a user to delete.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_5","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors_2","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html#forgetgroup","text":"Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys . function forgetGroup ( string $groupId ) : bool","title":"forgetGroup"},{"location":"api_reference/server/php/latest.html#parameters_5","text":"name type required description $groupId string true ID of a group to delete.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_6","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors_3","text":"type description AuthenticationError Implies invalid token , which further implies invalid application id or application key . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"guides/decrypt.html","text":"Encryption is a core feature of the blindnet SDK. Depending on the language, multiple data formats can be encrypted - strings , files or simply just byte arrays . We provide two methods to decrypt the data: decrypt and decryptValues . The following workflow is applied when decrypting data: The encrypted symmetric key of the user for the provided encrypted data is obtained from blindnet The encrypted symmetric key is decrypted using the user\u2019s secret key Data is decrypted with the symmetric key Only registered users can decrypt the data. decrypt # If the encrypted data is encoded , use the following helper methods to decode it before decrypting it. JavaScript 1 2 3 4 5 6 import { util } from '@blindnet/sdk-javascript' // if you use base64 encoding const encryptedData = util . fromBase64 ( encodedData ) // if you use hex encoding const encryptedData = util . fromHex ( encodedData ) To decrypt the data, use JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) data is the original data provided in the encrypt method. metadata is the object provided in the encrypt method. Metadata , besides the object fields provided in the encrypt method, will contain additional information on data format so it can be treated accordingly. Additional information in metadata is under the key dataType , which can have following values: { type: 'STRING' } meaning data is a string { type: 'FILE', name: string } meaning data is a file { type: 'BYTES' } meaning data is ArrayBuffer decryptValues # To decrypt the object values encrypted by the method encryptValues , use decryptValues method. JavaScript 1 const data = await blindnet . decryptValues ( encryptedData ) data is the original object passed to encryptValues method.","title":"Decrypting data"},{"location":"guides/decrypt.html#decrypt","text":"If the encrypted data is encoded , use the following helper methods to decode it before decrypting it. JavaScript 1 2 3 4 5 6 import { util } from '@blindnet/sdk-javascript' // if you use base64 encoding const encryptedData = util . fromBase64 ( encodedData ) // if you use hex encoding const encryptedData = util . fromHex ( encodedData ) To decrypt the data, use JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) data is the original data provided in the encrypt method. metadata is the object provided in the encrypt method. Metadata , besides the object fields provided in the encrypt method, will contain additional information on data format so it can be treated accordingly. Additional information in metadata is under the key dataType , which can have following values: { type: 'STRING' } meaning data is a string { type: 'FILE', name: string } meaning data is a file { type: 'BYTES' } meaning data is ArrayBuffer","title":"decrypt"},{"location":"guides/decrypt.html#decryptvalues","text":"To decrypt the object values encrypted by the method encryptValues , use decryptValues method. JavaScript 1 const data = await blindnet . decryptValues ( encryptedData ) data is the original object passed to encryptValues method.","title":"decryptValues"},{"location":"guides/encrypt.html","text":"Encryption is a core feature of the blindnet SDK. Depending on the language, multiple data formats can be encrypted - strings , files or simply just byte arrays . We provide two methods to encrypt the data: encrypt and encryptValues . The following workflow is applied when encrypting data: A list of user ids (specified in a temporary token ) is sent to blindnet to obtain the corresponding public keys An ephemeral symmetric key is generated Data is encrypted with the symmetric key For each public key, the symmetric key is encrypted A list of encrypted symmetric keys is sent to blindnet Encryption is completed by a user of your application ( registered or unregistered ) to another registered user. A user does not need to be logged into blindnet in order to encrypt the data. Data can be encrypted for a single user, a list of users or a user group . In the current api, the encryption destination is specified in the Server SDK . To encrypt the data, the client SDK needs to be initialized with the temporary token which contains information to whom the data is encrypted (user group or a list of users). To encrypt to a different destination, a new token needs to be generated. To encrypt the data for a specific users, obtain a temporary token using the following Server SDK method: PHP 1 2 $userIds = [\u20181\u2019, \u20182\u2019, \u20183\u2019] $tempUserJwt = $blindnet->createTempUserToken($userIds); To encrypt the data for a group , obtain a temporary token using the following server SDK method: PHP 1 2 $groupId = \u20181\u2019 $tempUserJwt = $blindnet->createTempUserToken($groupId); encrypt # This method encrypts the entire data passed as a parameter. Depending on a language, multiple formats are supported. Besides the data , a metadata can be passed as a second argument. It can be any JSON serializable object . JavaScript data can be string , File , Uint8Array or ArrayBuffer Other formats should be encoded to Uint8Array or ArrayBuffer . You can put the information on how to decode the data into the metadata . 1 2 3 4 5 // pass a short term token generated in the server SDK const blindnet = Blindnet . init ( tempUserJwt ) // e.g. data is a file // const data = document.getElementById('file-picker').files[0] const { dataId , encryptedData } = await blindnet . encrypt ( data , metadata ) encryptedData has a type ArrayBuffer . Encode # To be easily transferred, encryptedData can be encoded to base64 or hexadecimal string. JavaScript 1 2 3 4 import { util } from '@blindnet/sdk-javascript' const base64Encoded = util . toBase64 ( encryptedData ) const hexEncoded = util . toHex ( encryptedData ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To decrypt encryptedData , pass it to the decrypt method. Currently, encryption of streams is not supported so the entire data is loaded into the memory and then encrypted. Make sure your application does not run out of memory if e.g. large files are passed to the encrypt method. encryptValues # To encrypt the values of a JSON like object, use the encryptValues method. Object keys are left in plain text. This method can be used to e.g. encrypt the answers to a COVID questionnaire (where questions are already known therefore not a sensitive data). JavaScript 1 2 const data = { \u2018 first_name \u2019 : \u2018 Alice \u2019 , \u2018 last_name \u2019 : \u2018 Schumacher \u2019 } const { dataId , encryptedData } = await blindnet . encryptValues ( data ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To decrypt encryptedData , pass it to the decryptValues method.","title":"Encrypting data"},{"location":"guides/encrypt.html#encrypt","text":"This method encrypts the entire data passed as a parameter. Depending on a language, multiple formats are supported. Besides the data , a metadata can be passed as a second argument. It can be any JSON serializable object . JavaScript data can be string , File , Uint8Array or ArrayBuffer Other formats should be encoded to Uint8Array or ArrayBuffer . You can put the information on how to decode the data into the metadata . 1 2 3 4 5 // pass a short term token generated in the server SDK const blindnet = Blindnet . init ( tempUserJwt ) // e.g. data is a file // const data = document.getElementById('file-picker').files[0] const { dataId , encryptedData } = await blindnet . encrypt ( data , metadata ) encryptedData has a type ArrayBuffer .","title":"encrypt"},{"location":"guides/encrypt.html#encode","text":"To be easily transferred, encryptedData can be encoded to base64 or hexadecimal string. JavaScript 1 2 3 4 import { util } from '@blindnet/sdk-javascript' const base64Encoded = util . toBase64 ( encryptedData ) const hexEncoded = util . toHex ( encryptedData ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To decrypt encryptedData , pass it to the decrypt method. Currently, encryption of streams is not supported so the entire data is loaded into the memory and then encrypted. Make sure your application does not run out of memory if e.g. large files are passed to the encrypt method.","title":"Encode"},{"location":"guides/encrypt.html#encryptvalues","text":"To encrypt the values of a JSON like object, use the encryptValues method. Object keys are left in plain text. This method can be used to e.g. encrypt the answers to a COVID questionnaire (where questions are already known therefore not a sensitive data). JavaScript 1 2 const data = { \u2018 first_name \u2019 : \u2018 Alice \u2019 , \u2018 last_name \u2019 : \u2018 Schumacher \u2019 } const { dataId , encryptedData } = await blindnet . encryptValues ( data ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To decrypt encryptedData , pass it to the decryptValues method.","title":"encryptValues"},{"location":"guides/installation.html","text":"The following programming languages are currently supported: Client SDK: JavaScript Server SDK: PHP Node.js Installation # Client SDK # Javascript Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > For more info, check the api reference . Server SDK # PHP composer require blindnet/blindnet-sdk-php For more info, check the api reference . Node.js Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-node yarn Run the following command in your terminal. yarn add @blindnet/sdk-node For more info, check the api reference . Imports # Client SDK # The blindnet SDK api is enclosed in the Blindnet module. It should be imported together with the error types and optionally, utilities (e.g. to encode and decode the encrypted data). Javascript If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet For more info, check the api reference . Server SDK # PHP 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; For more info, check the api reference . Node.js const Blindnet = require ( '@blindnet/sdk-node' ) For more info, check the api reference . Initialization # Client SDK # Blindnet SDK must be initialized before you can use it (with the exception for some static methods, e.g. secret derivation ). To initialize the library, you need to provide the authentication token generated using the server SDK . Also, blindnet endpoint url can be provided. The default value is https://api.blindnet.io . If you are testing the library, use https://test.blindnet.io . Initialization is done with the init method. JavaScript 1 2 3 const blindnet = Blindnet . init ( token ) // for testing const blindnet = Blindnet . init ( token , 'https://test.blindnet.io' ) Server SDK # To initialize the server SDK, you need to obtain application id and application key . You can obtain them from the dashboard . As for the client SDK, you can provide an endpoint. For testing, use https://test.blindnet.io . PHP 1 2 3 $blindnet=Blindnet.init($appKey, $appId) // for testing $blindnet=Blindnet.init($appKey, $appId, 'https://test.blindnet.io') Node.js 1 2 3 const blindnet = await Blindnet . init ( appKey , appId ) // for testing const blindnet = await Blindnet . init ( appKey , appId , 'https://test.blindnet.io' )","title":"Installation"},{"location":"guides/installation.html#installation","text":"","title":"Installation"},{"location":"guides/installation.html#client_sdk","text":"Javascript Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > For more info, check the api reference .","title":"Client SDK"},{"location":"guides/installation.html#server_sdk","text":"PHP composer require blindnet/blindnet-sdk-php For more info, check the api reference . Node.js Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-node yarn Run the following command in your terminal. yarn add @blindnet/sdk-node For more info, check the api reference .","title":"Server SDK"},{"location":"guides/installation.html#imports","text":"","title":"Imports"},{"location":"guides/installation.html#client_sdk_1","text":"The blindnet SDK api is enclosed in the Blindnet module. It should be imported together with the error types and optionally, utilities (e.g. to encode and decode the encrypted data). Javascript If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet For more info, check the api reference .","title":"Client SDK"},{"location":"guides/installation.html#server_sdk_1","text":"PHP 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; For more info, check the api reference . Node.js const Blindnet = require ( '@blindnet/sdk-node' ) For more info, check the api reference .","title":"Server SDK"},{"location":"guides/installation.html#initialization","text":"","title":"Initialization"},{"location":"guides/installation.html#client_sdk_2","text":"Blindnet SDK must be initialized before you can use it (with the exception for some static methods, e.g. secret derivation ). To initialize the library, you need to provide the authentication token generated using the server SDK . Also, blindnet endpoint url can be provided. The default value is https://api.blindnet.io . If you are testing the library, use https://test.blindnet.io . Initialization is done with the init method. JavaScript 1 2 3 const blindnet = Blindnet . init ( token ) // for testing const blindnet = Blindnet . init ( token , 'https://test.blindnet.io' )","title":"Client SDK"},{"location":"guides/installation.html#server_sdk_2","text":"To initialize the server SDK, you need to obtain application id and application key . You can obtain them from the dashboard . As for the client SDK, you can provide an endpoint. For testing, use https://test.blindnet.io . PHP 1 2 3 $blindnet=Blindnet.init($appKey, $appId) // for testing $blindnet=Blindnet.init($appKey, $appId, 'https://test.blindnet.io') Node.js 1 2 3 const blindnet = await Blindnet . init ( appKey , appId ) // for testing const blindnet = await Blindnet . init ( appKey , appId , 'https://test.blindnet.io' )","title":"Server SDK"},{"location":"guides/introduction.html","text":"Blindnet SDK consists of client-side and server-side libraries for different languages and platforms. Server-side SDK is used mainly for user authentication in blindnet by providing the api to generate the authentication tokens . Additionally, you can use it to delete users and encryption keys of your application. Client-side SDK is used for encryption and decryption of the data shared between users of your application. Other functionalities are e.g. sharing the encrypted data with other users. In order to integrate blindnet to your application: You need to integrate both client-side and server-side SDKs . You need a way to authenticate the users in your application. Users in blindnet are identified by a unique identifier which is generated on your side. User\u2019s unique identifier is a part of the authentication token. You need to maintain the authenticated sessions with blindnet on the client-side for every user using the blindnet api. A session is identified by an authentication token generated by the server-side SDK and passed to the client-side . Tokens have an expiry time so make sure to generate new ones after they expire.","title":"Introduction"},{"location":"guides/managing_users_access.html","text":"You can manage your users\u2019 interaction with blindnet and their access to data through blindnet SDK methods that you invoke in your application. These methods allow you to connect your users to blindnet cluster users in groups give/revoke access to data update user passwords etc. Creating user tokens # Each request to blindnet needs to be authenticated, which is done through user tokens. You generate user tokens on your server by using blindnet Server SDK , and then pass the generated token in the initialization of blindnet Client SDK . To generate a user token, after initializing blindnet Server SDK call the following blindnet Server SDK method: PHP 1 2 3 $userId = 'your_user_id'; $groupId = 'your_user_group_id'; $userToken = $blindnet->createUserToken($userId, $groupId); Node.js 1 2 3 userId = 'your_user_id' ; groupId = 'your_user_group_id' ; const userToken = await blindnet . createUserToken ( userId , groupId ) User tokens expire 12 hours after they have been created. Creating temporary tokens # Temporary tokens are used to authenticate when encrypting the data. They contain the information to whom the data is being encrypted. PHP 1 2 $groupId = 'your_user_group_id'; $userToken = $blindnet->createTempUserToken($groupId); Node.js 1 2 3 4 5 groupId = 'your_user_group_id' const userToken = await blindnet . createTempUserToken ( groupId ) // or userIds = [ 'user_0' , 'user_1' ] const userToken = await blindnet . createTempUserToken ( userIds ) Temporary tokens expire 30 minutes after they have been created. Assigning a user to a group # Each of your users can belong to one user group or no group at all. For example, if your platform users are employees of a hotel or bank, you can group your users (employees) with respect to the hotel or bank they work with (group). You associate a user to a group by specifying the group ID in a user token when connecting a user to blindnet for the first time. Currently, you can't assign already created user to a different group. Delete the user and create it again with a different group id . Connecting users with blindnet # The core of security of blindnet are user\u2019s private keys . They are randomly generated on the user\u2019s local device and encrypted using a secret code (e.g. user\u2019s password) and then securely stored in blindnet. Blindnet allows you to reuse existing user passwords so that your users still use one password in your application. To do so safely, you need to use blindnet Client SDK to split user passwords before you connect a user to blindnet (check our Security page to see why this is inportant). Splitting secrets # Splitting user's password In the case that you send plaintext passwords to your server for user authentication, we advise that you update the authentication workflow in the following way. When a user is logging into your application and enters a password, you should use blindnet Client SDK to split the password into two parts: you use the second part ( appSecret ) to authenticate the user on your app, while you use the first part (( blindnetSecret ) for registering and logging users to blindnet. It is advisable not to use the same password for both actions since a party that can read the user's password (i.e., you) would be able to decrypt the user's private keys. To split the password use the following Client SDK method: JavaScript 1 2 const password = ' user_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( password ) Registering and logging users in blindnet # When a user logs into your system, you also need to login that user to blindnet. To do so, you first obtain blindnet secret by splitting user password , and then use the following Client SDK method: JavaScript await blindnet . connect ( blindnetSecret ) Blindnet SDK does not expose separate methods for user registration and logging in. You always use the connect method while its internals handle user registration and logging in. If it is the first time that a user is being connected to blindnet, the SDK will register that user by using the information you provide in a token . When you use the connect method, it locally initiates user\u2019s private keys so that later users can decrypt their data. Logging out users # When a user logs out of your application, you also need to log out that user from blindnet by using the following Client SDK method: JavaScript await blindnet . disconnect () This will remove the user's private keys from the user's local device. Changing secrets # Since user's keys are encrypted with the user's secret , changing the secret means the keys must be re-encrypted with the new secret value. Your users can change their passwords in your applications at any time without losing access to previously encrypted data. To ensure that access is not lost, when your user changes password, split the new password and use the corresponding Client SDK method: JavaScript 1 2 3 const newPassword = ' user_new_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( newPassword ) await blindnet . changeSecret ( blindnetSecret ) This will re-encrypt the user\u2019s private keys with the new secret and post them to blindnet. Giving access to other users # A user (Alice) can give access to encrypted data to another user (Bob). It means Alice will download her encrypted data keys and re-encrypt them with Bob's public key . This way Bob can download and decrypt the keys with his private key . Possible use-case for this is when a new user registers to blindnet and needs an access to e.g. customers' data. Think of a new hotel employee accessing guest's encrypted passport during check-in. Currently, Alice give access all the data for which she has the keys. To give access to other user, use the following Client SDK method: JavaScript 1 2 const userId = ' id_of_user_to_give_access_to \u2019 blindnet . giveAccess ( userId ) Lost secret # When a user loses the secret (forgets the login password), the user loses access to the encrypted data since they are unable to decrypt the keys used to encrypt the data. You need to put in place the following workflow Delete the user from blindnet. Log-in the user to blindnet with a new secret. After the user has logged-in, another user must give them access to the encrypted data. Warning If no other user has an access to a particular data when the secret is lost, no one will be able to decrypt the data. Revoking user access # Revoking an access to a user means the user will lose all the keys necessary to decrypt the data and consequently, lose access to data. Your server should inform blindnet about a user for which the access is being revoked, by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_revoke_access'; $blindnet->revokeAccess($userId); Node.js 1 2 userId = 'id_of_user_to_revoke_access' await blindnet . revokeAccess ( userId ) In the situation where all users in a user group always have access to all the data, this action is not meaningful and deletion of users should be performed instead. Deleting encrypted data keys # When data is deleted from your server, it's encrypted keys should be deleted from blindnet. User the following Server SDK method to delete the keys: PHP 1 2 $dataId = 'id_of_deleted_data'; $blindnet->forgetData($dataId); Node.js 1 2 dataId = 'id_of_deleted_data' await blindnet . forgetData ( dataId ) Deleting users # When a user is deleted from your application, you must inform blindnet about the event. This is done from your server by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_delete'; $blindnet->forgetUser($userId); Node.js 1 2 userId = 'id_of_user_to_delete' await blindnet . forgetUser ( userId ) Deleting a user from blindnet implies that the deleted user will no longer be able to decrypt any data, and other users will no longer be able to encrypt data for that user. When deleting users, you must be careful not to delete the last user of a group because in that case all existing data will become undecryptable. Deleting the last user has the same effect as deleting a user group . Deleting user groups # To delete a user group , use the following blindnet Server SDK method: PHP 1 2 $groupId = 'id_of_group_to_delete'; $blindnet->forgetGroup($groupId); Node.js 1 2 groupId = 'id_of_group_to_delete' await blindnet . forgetGroup ( groupId ) Deleting a user group in blindnet system implies deleting all its users and encrypted keys from blindnet. This means that encrypted data of this group stored on your servers will not be decryptable anymore.","title":"Managing users and access"},{"location":"guides/managing_users_access.html#creating_user_tokens","text":"Each request to blindnet needs to be authenticated, which is done through user tokens. You generate user tokens on your server by using blindnet Server SDK , and then pass the generated token in the initialization of blindnet Client SDK . To generate a user token, after initializing blindnet Server SDK call the following blindnet Server SDK method: PHP 1 2 3 $userId = 'your_user_id'; $groupId = 'your_user_group_id'; $userToken = $blindnet->createUserToken($userId, $groupId); Node.js 1 2 3 userId = 'your_user_id' ; groupId = 'your_user_group_id' ; const userToken = await blindnet . createUserToken ( userId , groupId ) User tokens expire 12 hours after they have been created.","title":"Creating user tokens"},{"location":"guides/managing_users_access.html#creating_temporary_tokens","text":"Temporary tokens are used to authenticate when encrypting the data. They contain the information to whom the data is being encrypted. PHP 1 2 $groupId = 'your_user_group_id'; $userToken = $blindnet->createTempUserToken($groupId); Node.js 1 2 3 4 5 groupId = 'your_user_group_id' const userToken = await blindnet . createTempUserToken ( groupId ) // or userIds = [ 'user_0' , 'user_1' ] const userToken = await blindnet . createTempUserToken ( userIds ) Temporary tokens expire 30 minutes after they have been created.","title":"Creating temporary tokens"},{"location":"guides/managing_users_access.html#assigning_a_user_to_a_group","text":"Each of your users can belong to one user group or no group at all. For example, if your platform users are employees of a hotel or bank, you can group your users (employees) with respect to the hotel or bank they work with (group). You associate a user to a group by specifying the group ID in a user token when connecting a user to blindnet for the first time. Currently, you can't assign already created user to a different group. Delete the user and create it again with a different group id .","title":"Assigning a user to a group"},{"location":"guides/managing_users_access.html#connecting_users_with_blindnet","text":"The core of security of blindnet are user\u2019s private keys . They are randomly generated on the user\u2019s local device and encrypted using a secret code (e.g. user\u2019s password) and then securely stored in blindnet. Blindnet allows you to reuse existing user passwords so that your users still use one password in your application. To do so safely, you need to use blindnet Client SDK to split user passwords before you connect a user to blindnet (check our Security page to see why this is inportant).","title":"Connecting users with blindnet"},{"location":"guides/managing_users_access.html#splitting_secrets","text":"Splitting user's password In the case that you send plaintext passwords to your server for user authentication, we advise that you update the authentication workflow in the following way. When a user is logging into your application and enters a password, you should use blindnet Client SDK to split the password into two parts: you use the second part ( appSecret ) to authenticate the user on your app, while you use the first part (( blindnetSecret ) for registering and logging users to blindnet. It is advisable not to use the same password for both actions since a party that can read the user's password (i.e., you) would be able to decrypt the user's private keys. To split the password use the following Client SDK method: JavaScript 1 2 const password = ' user_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( password )","title":"Splitting secrets"},{"location":"guides/managing_users_access.html#registering_and_logging_users_in_blindnet","text":"When a user logs into your system, you also need to login that user to blindnet. To do so, you first obtain blindnet secret by splitting user password , and then use the following Client SDK method: JavaScript await blindnet . connect ( blindnetSecret ) Blindnet SDK does not expose separate methods for user registration and logging in. You always use the connect method while its internals handle user registration and logging in. If it is the first time that a user is being connected to blindnet, the SDK will register that user by using the information you provide in a token . When you use the connect method, it locally initiates user\u2019s private keys so that later users can decrypt their data.","title":"Registering and logging users in blindnet"},{"location":"guides/managing_users_access.html#logging_out_users","text":"When a user logs out of your application, you also need to log out that user from blindnet by using the following Client SDK method: JavaScript await blindnet . disconnect () This will remove the user's private keys from the user's local device.","title":"Logging out users"},{"location":"guides/managing_users_access.html#changing_secrets","text":"Since user's keys are encrypted with the user's secret , changing the secret means the keys must be re-encrypted with the new secret value. Your users can change their passwords in your applications at any time without losing access to previously encrypted data. To ensure that access is not lost, when your user changes password, split the new password and use the corresponding Client SDK method: JavaScript 1 2 3 const newPassword = ' user_new_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( newPassword ) await blindnet . changeSecret ( blindnetSecret ) This will re-encrypt the user\u2019s private keys with the new secret and post them to blindnet.","title":"Changing secrets"},{"location":"guides/managing_users_access.html#giving_access_to_other_users","text":"A user (Alice) can give access to encrypted data to another user (Bob). It means Alice will download her encrypted data keys and re-encrypt them with Bob's public key . This way Bob can download and decrypt the keys with his private key . Possible use-case for this is when a new user registers to blindnet and needs an access to e.g. customers' data. Think of a new hotel employee accessing guest's encrypted passport during check-in. Currently, Alice give access all the data for which she has the keys. To give access to other user, use the following Client SDK method: JavaScript 1 2 const userId = ' id_of_user_to_give_access_to \u2019 blindnet . giveAccess ( userId )","title":"Giving access to other users"},{"location":"guides/managing_users_access.html#lost_secret","text":"When a user loses the secret (forgets the login password), the user loses access to the encrypted data since they are unable to decrypt the keys used to encrypt the data. You need to put in place the following workflow Delete the user from blindnet. Log-in the user to blindnet with a new secret. After the user has logged-in, another user must give them access to the encrypted data. Warning If no other user has an access to a particular data when the secret is lost, no one will be able to decrypt the data.","title":"Lost secret"},{"location":"guides/managing_users_access.html#revoking_user_access","text":"Revoking an access to a user means the user will lose all the keys necessary to decrypt the data and consequently, lose access to data. Your server should inform blindnet about a user for which the access is being revoked, by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_revoke_access'; $blindnet->revokeAccess($userId); Node.js 1 2 userId = 'id_of_user_to_revoke_access' await blindnet . revokeAccess ( userId ) In the situation where all users in a user group always have access to all the data, this action is not meaningful and deletion of users should be performed instead.","title":"Revoking user access"},{"location":"guides/managing_users_access.html#deleting_encrypted_data_keys","text":"When data is deleted from your server, it's encrypted keys should be deleted from blindnet. User the following Server SDK method to delete the keys: PHP 1 2 $dataId = 'id_of_deleted_data'; $blindnet->forgetData($dataId); Node.js 1 2 dataId = 'id_of_deleted_data' await blindnet . forgetData ( dataId )","title":"Deleting encrypted data keys"},{"location":"guides/managing_users_access.html#deleting_users","text":"When a user is deleted from your application, you must inform blindnet about the event. This is done from your server by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_delete'; $blindnet->forgetUser($userId); Node.js 1 2 userId = 'id_of_user_to_delete' await blindnet . forgetUser ( userId ) Deleting a user from blindnet implies that the deleted user will no longer be able to decrypt any data, and other users will no longer be able to encrypt data for that user. When deleting users, you must be careful not to delete the last user of a group because in that case all existing data will become undecryptable. Deleting the last user has the same effect as deleting a user group .","title":"Deleting users"},{"location":"guides/managing_users_access.html#deleting_user_groups","text":"To delete a user group , use the following blindnet Server SDK method: PHP 1 2 $groupId = 'id_of_group_to_delete'; $blindnet->forgetGroup($groupId); Node.js 1 2 groupId = 'id_of_group_to_delete' await blindnet . forgetGroup ( groupId ) Deleting a user group in blindnet system implies deleting all its users and encrypted keys from blindnet. This means that encrypted data of this group stored on your servers will not be decryptable anymore.","title":"Deleting user groups"},{"location":"how_it_works/how_it_works.html","text":"How it works # The figure below shows different components of blindnet. Blindnet components. Blindnet in web applications # To protect user data in your web application, blindnet provides an SDK for data encryption and decryption, and for managing encryption keys. Blindnet in web and mixed applications. Let\u2019s call our receiver Alice and our sender Bob. With blindnet, if Bob wants to send data (e.g., a text message or a file) to Alice, the process is as follows: Bob inputs the data (e.g. a file) into the browser's interface The browser will use blindnet SDK to encrypt the data Encrypted data should then be transferred and stored on your app's server When Alice requests the data (or immediately after the data was stored), your app delivers the encrypted data to her The browser on Alice's device will use blindnet SDK to decrypt the data Alice views the original data that Bob sent to her This workflow ensures that only Alice and Bob have access to the data. To be more precise, only Alice and Bob possess the encryption key used to encrypt the file. While stored and in transfer, the file is encrypted and neither blindnet nor the app\u2019s server are able to access it. After the data is decrypted in Alice's browser, it can simply be saved on her device. The data stays encrypted on the app's server and Step 4 can be carried out multiple times. In step 2. (The browser will use blindnet api to encrypt the message), blindnet api performs the following steps: Generates an ephemeral encryption key and encrypts the data Obtains Alice's public key and verifies it belongs to her Encrypts the ephemeral encryption key and saves it to the blinenet server Returns the encrypted data In Step 4. (The browser on Alices's device will use blindnet api to decrypt the data), blindnet SDK performs the following steps: Obtains the encrypted ephemeral key from blindnet\u2019s server Uses Alice's private key to decrypt they key Uses the decrypted key to decrypt the encrypted data Returns the original data Blindnet supports use cases in which data senders can be both registered or unregistered users of your application. Data exhange between two registered users works in a way similar to the one described above, with a difference that teh symmetric key for encrypting the data from Bob to Alice is always the same, and it is securely stored on blindnet servers after it has been previously encrypted with Bob's and Alice's public keys. Blindnet in mobile/desktop only applications # Coming soon...","title":"How it works"},{"location":"how_it_works/how_it_works.html#how_it_works","text":"The figure below shows different components of blindnet. Blindnet components.","title":"How it works"},{"location":"how_it_works/how_it_works.html#blindnet_in_web_applications","text":"To protect user data in your web application, blindnet provides an SDK for data encryption and decryption, and for managing encryption keys. Blindnet in web and mixed applications. Let\u2019s call our receiver Alice and our sender Bob. With blindnet, if Bob wants to send data (e.g., a text message or a file) to Alice, the process is as follows: Bob inputs the data (e.g. a file) into the browser's interface The browser will use blindnet SDK to encrypt the data Encrypted data should then be transferred and stored on your app's server When Alice requests the data (or immediately after the data was stored), your app delivers the encrypted data to her The browser on Alice's device will use blindnet SDK to decrypt the data Alice views the original data that Bob sent to her This workflow ensures that only Alice and Bob have access to the data. To be more precise, only Alice and Bob possess the encryption key used to encrypt the file. While stored and in transfer, the file is encrypted and neither blindnet nor the app\u2019s server are able to access it. After the data is decrypted in Alice's browser, it can simply be saved on her device. The data stays encrypted on the app's server and Step 4 can be carried out multiple times. In step 2. (The browser will use blindnet api to encrypt the message), blindnet api performs the following steps: Generates an ephemeral encryption key and encrypts the data Obtains Alice's public key and verifies it belongs to her Encrypts the ephemeral encryption key and saves it to the blinenet server Returns the encrypted data In Step 4. (The browser on Alices's device will use blindnet api to decrypt the data), blindnet SDK performs the following steps: Obtains the encrypted ephemeral key from blindnet\u2019s server Uses Alice's private key to decrypt they key Uses the decrypted key to decrypt the encrypted data Returns the original data Blindnet supports use cases in which data senders can be both registered or unregistered users of your application. Data exhange between two registered users works in a way similar to the one described above, with a difference that teh symmetric key for encrypting the data from Bob to Alice is always the same, and it is securely stored on blindnet servers after it has been previously encrypted with Bob's and Alice's public keys.","title":"Blindnet in web applications"},{"location":"how_it_works/how_it_works.html#blindnet_in_mobiledesktop_only_applications","text":"Coming soon...","title":"Blindnet in mobile/desktop only applications"},{"location":"how_it_works/introduction.html","text":"Introduction # Blindnet offers a simple solution to enable data privacy and compliance with data minimization requirements in various data regulations, including GDPR and CCPA / CPRA. Beyond compliance, blindnet provides software developers with a zero-trust service to minimize the exposure to unnecessary user data and reduce the risk in case of data breaches. Blindnet enables protection of your users\u2019 data via SDKs. Blindnet\u2019s infrastructure is built for secured synchronous and asynchronous data transfers. The SDKs offer end-to-end encryption in your web or mobile applications, and are compatible with all available user authentication systems. The user experience does not change when you integrate blindnet. Blindnet can protect your users\u2019 data (e.g., files, images, documents) both in web applications and in mobile/desktop applications. We provide two solutions, based on whether your application has a web client or not: You app clients Communication Solutions Web app only web-to-web Solution 1: encryption only Mixed: web and standalone apps (mobile/desktop) web-to-web, web-to-standalone, standalone-to-standalone Solution 1: encryption only Standalone app only (mobile/desktop) standalone-to-standalone Solution 2: encryption and transfers (coming soon) When using a blindnet SDK in your application, the SDK encrypts and decrypts user data directly on user local machines (e.g, browsers or mobile phones), while managing the encryption keys in the background. Solution 1 : Web applications and mixed applications # Blindnet for web application offers: Symmetric encryption of documents (e.g., files, images); document keys are randomly generated and transferred between users with asymmetric key encryption. A password-based secure backup of user private keys, which allows users to access their data from different browsers. Thanks to our password splitting function your users still use only one password to access your system and to secure their private keys. Data exchange between registered users of your application, and from unregistered to registered users. Zero-trust service: no one except senders and intended recipients can read the data. Blindnet in web and mixed applications. Solution 2 : Mobile/desktop only applications (coming soon) # Blindnet SDK is available for your mobile or desktop application, offering: A Signal protocol for end-to-end encryption Asynchronous and synchronous data transfers, which means that your users do not have to use the system at the same time in order to exchange data Data transfer from sender\u2019s to recipient\u2019s device, and secured temporary storage in case of asynchronous transfers Private backup of data that users receive from other users, retrievable in case of device loss Zero-trust service: no one except senders and intended recipients can read the data or backups. Blindnet in mobile/desktop applications.","title":"Introduction"},{"location":"how_it_works/introduction.html#introduction","text":"Blindnet offers a simple solution to enable data privacy and compliance with data minimization requirements in various data regulations, including GDPR and CCPA / CPRA. Beyond compliance, blindnet provides software developers with a zero-trust service to minimize the exposure to unnecessary user data and reduce the risk in case of data breaches. Blindnet enables protection of your users\u2019 data via SDKs. Blindnet\u2019s infrastructure is built for secured synchronous and asynchronous data transfers. The SDKs offer end-to-end encryption in your web or mobile applications, and are compatible with all available user authentication systems. The user experience does not change when you integrate blindnet. Blindnet can protect your users\u2019 data (e.g., files, images, documents) both in web applications and in mobile/desktop applications. We provide two solutions, based on whether your application has a web client or not: You app clients Communication Solutions Web app only web-to-web Solution 1: encryption only Mixed: web and standalone apps (mobile/desktop) web-to-web, web-to-standalone, standalone-to-standalone Solution 1: encryption only Standalone app only (mobile/desktop) standalone-to-standalone Solution 2: encryption and transfers (coming soon) When using a blindnet SDK in your application, the SDK encrypts and decrypts user data directly on user local machines (e.g, browsers or mobile phones), while managing the encryption keys in the background.","title":"Introduction"},{"location":"how_it_works/introduction.html#solution_1_web_applications_and_mixed_applications","text":"Blindnet for web application offers: Symmetric encryption of documents (e.g., files, images); document keys are randomly generated and transferred between users with asymmetric key encryption. A password-based secure backup of user private keys, which allows users to access their data from different browsers. Thanks to our password splitting function your users still use only one password to access your system and to secure their private keys. Data exchange between registered users of your application, and from unregistered to registered users. Zero-trust service: no one except senders and intended recipients can read the data. Blindnet in web and mixed applications.","title":"Solution 1: Web applications and mixed applications"},{"location":"how_it_works/introduction.html#solution_2_mobiledesktop_only_applications_coming_soon","text":"Blindnet SDK is available for your mobile or desktop application, offering: A Signal protocol for end-to-end encryption Asynchronous and synchronous data transfers, which means that your users do not have to use the system at the same time in order to exchange data Data transfer from sender\u2019s to recipient\u2019s device, and secured temporary storage in case of asynchronous transfers Private backup of data that users receive from other users, retrievable in case of device loss Zero-trust service: no one except senders and intended recipients can read the data or backups. Blindnet in mobile/desktop applications.","title":"Solution 2: Mobile/desktop only applications (coming soon)"},{"location":"how_it_works/security.html","text":"User private keys # All user key pairs are always randomly generated. Before users' private keys are uploaded to blindnet servers, they are encrypted with a symmetric key derived from user passwords. This allows users to benefit from private data transfers using any browser or device, while protecting their private keys and ensuring the data transfer between any two users is end-to-end encrypted. User passwords # Note To allow your users to use only one password for both your application and blindnet, you must first split their passwords (i.e., you must use user password to derive two secrets, one for your application and one for blindnet). To provide seamless user experience in your application while preserving the highest level of data privacy for your users, your users can still input only one password for both authenticating on your application and securing blindnet private keys. However, it is important that under the hood you split this password into two secrets by using blindnet client SDK. This is needed because using the same secret in both your application and blindnet would give you access to user private keys. See our documentation to see how to easily split user passwords with our SDKs.","title":"Security"},{"location":"how_it_works/security.html#user_private_keys","text":"All user key pairs are always randomly generated. Before users' private keys are uploaded to blindnet servers, they are encrypted with a symmetric key derived from user passwords. This allows users to benefit from private data transfers using any browser or device, while protecting their private keys and ensuring the data transfer between any two users is end-to-end encrypted.","title":"User private keys"},{"location":"how_it_works/security.html#user_passwords","text":"Note To allow your users to use only one password for both your application and blindnet, you must first split their passwords (i.e., you must use user password to derive two secrets, one for your application and one for blindnet). To provide seamless user experience in your application while preserving the highest level of data privacy for your users, your users can still input only one password for both authenticating on your application and securing blindnet private keys. However, it is important that under the hood you split this password into two secrets by using blindnet client SDK. This is needed because using the same secret in both your application and blindnet would give you access to user private keys. See our documentation to see how to easily split user passwords with our SDKs.","title":"User passwords"},{"location":"other/glossary.html","text":"Application ID # A randomly generated UUID which identifies an application in blindnet. Used as a parameter in the initialization method of the Server SDK . Application key # A secret value ( private key ) which proves the ownership of an application id . It is used to sign the tokens in the token generation methods. Used as a parameter in the initialization method of the Server SDK . Asymmetric key encryption # Type of encryption where different keys are used to encrypt and to decrypt the data. A public key is used to encrypt the data while it's associated private key is used to decrypt the encrypted data. In blindnet, it is used to encrypt a symmetric key for an other user, as a way to do a symmetric key exchange so two users can securely communicate. Authentication token # Every request made to the blindnet servers through blindnet SDK must be authenticated. Authentication is done through authentication tokens which are generated using the Server SDK . Authentication tokens are used as parameters in the initialization methods of the Client SDK . All tokens are signed by an application key and validated in blindnet. We distinguish three types of tokens in blindnet: tokens for registered users , short term tokens and client tokens . Registered user token # A token which authenticates a user known to your system in blindnet. Contains the information about user's id and application id. Short term token # A token which authenticates an unregistered user (in your system) in blindnet. Used e.g. when a user needs to upload a document using a form the user received by e-mail (no need to register an account). Client token # A token used by the Server SDK for various user and data management functionalities to authenticate your server. Blindnet endpoint # URL of the blindnet api you should use in production. The URL is defined in the initialization methods of both Client and Server SDKs . The default value is https://api.blindnet.io Testing endpoint # URL of the blindnet api you should use when testing. It must be manually set to https://test.blindnet.io Blindnet SDK # Blindnet is integrated to your application using the libraries for you client and server applications. SDKs provide the methods to encrypt and decrypt the data, register a new user, delete a user etc. Multiple programming languages are supported for both Client-side and Server-side SDKs. To use blindnet, both Client and Server SDKs must be integrated in your application. Client-side SDK # A set of libraries for front-end applications. Client-side SDK is used for encryption and decryption of data shared between users of your application. Other functionalities are e.g. giving access to encrypted data to a user who doesn\u2019t possess the encryption keys . Server-side SDK # A set of libraries for back-end applications. Server-side SDK is used mainly for user authentication in blindnet by providing the api to generate the authentication tokens . Additionally, you can use it to delete users and delete encryption keys of your application registered in blindnet. Data # Data is anything a user is encrypting. It is in a plain, unencrypted format. Data never leaves user's device until it is encrypted . Depending on the Client SDK , multiple formats are supported - String , File , byte array . If the format of the provided data is not supporetd by the SDK, you should encode it to a byte array before encrypting , and decode it after decrypting . Data key # Every piece of data in blindnet is encrypted with a different symmetric key. Only a user who encrypted the data and the users to whom it was encrypted have access to the data key. The key is stored on the blindnet servers encrypted. Digital signature # An algorithm used to validate the authenticity and integrity of a message. In assymetric key encryption schemes, private key is used to sign a message while the associated public key is used to validate the signature. Signatures can't be forged and we can be sure the message was created by the owner of the private key. Encrypted data # When a data is encrypted from any method in the Client SDK , it can be safely transferred to your or blindnet server. Only a user who encrypted the data and the users to whom it was encrypted can decrypt the data. To obtain the orginal data , the encrypted data has to be decrypted . Encrypted data key # An encrypted key stored on the blindnet servers. Only a user who created the key to encrypt the data and the users to whom it was encrypted have access can decrypt the data key. Key pair # A pair of private and public keys. Private keys are usually generated randomly while the public keys are calculated from the them. Derivation of a public key from a private key is is fast (having linear complexity) while vice-versa, the derivation is should be impossible with current computing power. That's it's important to keep the private keys \"private\" while public keys can be safely distributed. Metadata # Additional data that can be encrypted alongside the data . It is provided in a JSON serializable format. Private key # Every application and user in blindnet owns at least one private key (paired with a publicly available public key ) which is stored locally on the app server or user's devices and encrypted on the blindnet servers. In an asymmetric key encryption scheme, secret key is used to decrypt the data encrypted by it's associated public key . The other usage is to sign the data which is later verified by private key's associated public key and thus prove the ownership of the key. Public key # Every application and user in blindnet owns at least one public key (paired with a private key ) which is stored in the blindnet servers. In an asymmetric key encryption scheme, public key is publicly available and used to encrypt the data for it's owner. Key owner is the only one who can decrypt the data using their private key . The other usage of a public key is to verify a digital signature of a signed data made by the key owner using their private key . Session # A session is identified by a token . It is valid until the timestamp specified in the token. For a registered user , token expires after 12 hours . For an unregistered user , token expires after 30 minutes . For a client ( Server SDK ), token expires after 24 hours . Symmetric key encryption # Type of encryption where a single secret key is used both to encrypt and to decrypt the data. Two parties must share a key in order to securely communicate. Key sharing is usually done through asymmetric key encryption based protocols. Secret value # A value only known to a user of your application. It is used to encrypt user's keys before sending them to the blindnet server. It can be any string value, e.g. the user's password or an answer to a question. If the user's password is used as a secret value, make sure not to send the password to you server in plain text. Instead, you should hash it . Secret derivation # If a same secret value is used to log-in a user to your application as well as to connect the user to blindnet, the secret must be hashed and split into two values. The first value is used as user's log-in password and sent to your server. The second value is used to encrypt user's keys in blindnet. This way, anyone having access to your server won't be able to decrypt user's keys. To split the secret, use the provided Client SDK method . User # A user known to your application which can be authenticated to blindnet using a token . Registered user # A user identified by your application by e.g. a unique id or an email . To authenticate a registered user in blindnet, generate a Registered user token which will be sent in every request from the SDK to blindnet. Anonymous user # A user which doesn't need to be identified in your application. Currently, a (short term) token for an anonymous user is used to encrypt the data. User groups # A logical grouping of users in your application. When encrypting the data, a group can be specified . Any user belonging the specified group will be able to decrypt the data. Currently, a user can belong only to a single group which is specified when registering the user to blindnet and it can't be changed afterwards.","title":"Glossary"},{"location":"other/glossary.html#application_id","text":"A randomly generated UUID which identifies an application in blindnet. Used as a parameter in the initialization method of the Server SDK .","title":"Application ID"},{"location":"other/glossary.html#application_key","text":"A secret value ( private key ) which proves the ownership of an application id . It is used to sign the tokens in the token generation methods. Used as a parameter in the initialization method of the Server SDK .","title":"Application key"},{"location":"other/glossary.html#asymmetric_key_encryption","text":"Type of encryption where different keys are used to encrypt and to decrypt the data. A public key is used to encrypt the data while it's associated private key is used to decrypt the encrypted data. In blindnet, it is used to encrypt a symmetric key for an other user, as a way to do a symmetric key exchange so two users can securely communicate.","title":"Asymmetric key encryption"},{"location":"other/glossary.html#authentication_token","text":"Every request made to the blindnet servers through blindnet SDK must be authenticated. Authentication is done through authentication tokens which are generated using the Server SDK . Authentication tokens are used as parameters in the initialization methods of the Client SDK . All tokens are signed by an application key and validated in blindnet. We distinguish three types of tokens in blindnet: tokens for registered users , short term tokens and client tokens .","title":"Authentication token"},{"location":"other/glossary.html#registered_user_token","text":"A token which authenticates a user known to your system in blindnet. Contains the information about user's id and application id.","title":"Registered user token"},{"location":"other/glossary.html#short_term_token","text":"A token which authenticates an unregistered user (in your system) in blindnet. Used e.g. when a user needs to upload a document using a form the user received by e-mail (no need to register an account).","title":"Short term token"},{"location":"other/glossary.html#client_token","text":"A token used by the Server SDK for various user and data management functionalities to authenticate your server.","title":"Client token"},{"location":"other/glossary.html#blindnet_endpoint","text":"URL of the blindnet api you should use in production. The URL is defined in the initialization methods of both Client and Server SDKs . The default value is https://api.blindnet.io","title":"Blindnet endpoint"},{"location":"other/glossary.html#testing_endpoint","text":"URL of the blindnet api you should use when testing. It must be manually set to https://test.blindnet.io","title":"Testing endpoint"},{"location":"other/glossary.html#blindnet_sdk","text":"Blindnet is integrated to your application using the libraries for you client and server applications. SDKs provide the methods to encrypt and decrypt the data, register a new user, delete a user etc. Multiple programming languages are supported for both Client-side and Server-side SDKs. To use blindnet, both Client and Server SDKs must be integrated in your application.","title":"Blindnet SDK"},{"location":"other/glossary.html#client-side_sdk","text":"A set of libraries for front-end applications. Client-side SDK is used for encryption and decryption of data shared between users of your application. Other functionalities are e.g. giving access to encrypted data to a user who doesn\u2019t possess the encryption keys .","title":"Client-side SDK"},{"location":"other/glossary.html#server-side_sdk","text":"A set of libraries for back-end applications. Server-side SDK is used mainly for user authentication in blindnet by providing the api to generate the authentication tokens . Additionally, you can use it to delete users and delete encryption keys of your application registered in blindnet.","title":"Server-side SDK"},{"location":"other/glossary.html#data","text":"Data is anything a user is encrypting. It is in a plain, unencrypted format. Data never leaves user's device until it is encrypted . Depending on the Client SDK , multiple formats are supported - String , File , byte array . If the format of the provided data is not supporetd by the SDK, you should encode it to a byte array before encrypting , and decode it after decrypting .","title":"Data"},{"location":"other/glossary.html#data_key","text":"Every piece of data in blindnet is encrypted with a different symmetric key. Only a user who encrypted the data and the users to whom it was encrypted have access to the data key. The key is stored on the blindnet servers encrypted.","title":"Data key"},{"location":"other/glossary.html#digital_signature","text":"An algorithm used to validate the authenticity and integrity of a message. In assymetric key encryption schemes, private key is used to sign a message while the associated public key is used to validate the signature. Signatures can't be forged and we can be sure the message was created by the owner of the private key.","title":"Digital signature"},{"location":"other/glossary.html#encrypted_data","text":"When a data is encrypted from any method in the Client SDK , it can be safely transferred to your or blindnet server. Only a user who encrypted the data and the users to whom it was encrypted can decrypt the data. To obtain the orginal data , the encrypted data has to be decrypted .","title":"Encrypted data"},{"location":"other/glossary.html#encrypted_data_key","text":"An encrypted key stored on the blindnet servers. Only a user who created the key to encrypt the data and the users to whom it was encrypted have access can decrypt the data key.","title":"Encrypted data key"},{"location":"other/glossary.html#key_pair","text":"A pair of private and public keys. Private keys are usually generated randomly while the public keys are calculated from the them. Derivation of a public key from a private key is is fast (having linear complexity) while vice-versa, the derivation is should be impossible with current computing power. That's it's important to keep the private keys \"private\" while public keys can be safely distributed.","title":"Key pair"},{"location":"other/glossary.html#metadata","text":"Additional data that can be encrypted alongside the data . It is provided in a JSON serializable format.","title":"Metadata"},{"location":"other/glossary.html#private_key","text":"Every application and user in blindnet owns at least one private key (paired with a publicly available public key ) which is stored locally on the app server or user's devices and encrypted on the blindnet servers. In an asymmetric key encryption scheme, secret key is used to decrypt the data encrypted by it's associated public key . The other usage is to sign the data which is later verified by private key's associated public key and thus prove the ownership of the key.","title":"Private key"},{"location":"other/glossary.html#public_key","text":"Every application and user in blindnet owns at least one public key (paired with a private key ) which is stored in the blindnet servers. In an asymmetric key encryption scheme, public key is publicly available and used to encrypt the data for it's owner. Key owner is the only one who can decrypt the data using their private key . The other usage of a public key is to verify a digital signature of a signed data made by the key owner using their private key .","title":"Public key"},{"location":"other/glossary.html#session","text":"A session is identified by a token . It is valid until the timestamp specified in the token. For a registered user , token expires after 12 hours . For an unregistered user , token expires after 30 minutes . For a client ( Server SDK ), token expires after 24 hours .","title":"Session"},{"location":"other/glossary.html#symmetric_key_encryption","text":"Type of encryption where a single secret key is used both to encrypt and to decrypt the data. Two parties must share a key in order to securely communicate. Key sharing is usually done through asymmetric key encryption based protocols.","title":"Symmetric key encryption"},{"location":"other/glossary.html#secret_value","text":"A value only known to a user of your application. It is used to encrypt user's keys before sending them to the blindnet server. It can be any string value, e.g. the user's password or an answer to a question. If the user's password is used as a secret value, make sure not to send the password to you server in plain text. Instead, you should hash it .","title":"Secret value"},{"location":"other/glossary.html#secret_derivation","text":"If a same secret value is used to log-in a user to your application as well as to connect the user to blindnet, the secret must be hashed and split into two values. The first value is used as user's log-in password and sent to your server. The second value is used to encrypt user's keys in blindnet. This way, anyone having access to your server won't be able to decrypt user's keys. To split the secret, use the provided Client SDK method .","title":"Secret derivation"},{"location":"other/glossary.html#user","text":"A user known to your application which can be authenticated to blindnet using a token .","title":"User"},{"location":"other/glossary.html#registered_user","text":"A user identified by your application by e.g. a unique id or an email . To authenticate a registered user in blindnet, generate a Registered user token which will be sent in every request from the SDK to blindnet.","title":"Registered user"},{"location":"other/glossary.html#anonymous_user","text":"A user which doesn't need to be identified in your application. Currently, a (short term) token for an anonymous user is used to encrypt the data.","title":"Anonymous user"},{"location":"other/glossary.html#user_groups","text":"A logical grouping of users in your application. When encrypting the data, a group can be specified . Any user belonging the specified group will be able to decrypt the data. Currently, a user can belong only to a single group which is specified when registering the user to blindnet and it can't be changed afterwards.","title":"User groups"},{"location":"other/qna.html","text":"What is End-to-end Encryption? # End-to-end encryption is an approach in which a software system encrypts data upon capture, supports encryption throughout transfer, and allows for data decrypting only at the endpoint of their consumption. In such a way user data is not accessible in the non-encrypted form at any central entity. Encryption is a process of converting a readable dataset into code in order to prevent unauthorized access. End-to-end encryption is a functionality in which a software system protects the data through its entire life cycle, from end-point capture and transit to storage and access.The intent of end-to-end encryption is to ensure that data is available only to authorized users and unreadable to anyone else. The classic client-server architecture of internet software applications introduced the idea of centralized data storage on cloud or on-prem servers, while keeping software running on endpoints (i.e. the interfaces through which the users interact with the system), light in functionality, often reduced to data display and data entry. While convenient, this approach rests on the exposure of mass quantities of confidential user information to both data breaches (external threats) and misuse (internal threats). Due to growing concerns for user privacy, end-to-end encryption quickly gained ground over the last decade . Signal protocol has been recognized as a golden standard in the developer community. It is used across various applications, including widely popular WhatsApp. Through Signal protocol, users\u2019 messages are encrypted on their devices and exchanged with other users without the ability for the central entity to decrypt and access those messages. . The cryptographic primitives are exchanged in such a way that only the endpoints (sender and receiver) have access to the necessary decryption keys. End-to-end encryption is currently spreading to various other businesses, augmenting the classic client-server architecture, and allowing developers to make privacy-first software in many other use-cases. Blindnet offers a simple solution to developers to embed end-to-end encryption in their software architecture, protect user data and limit exposure and liabilities to only critical sensitive information. Why do I need End-to-end Encryption # Fulfil users expectations and earn their trust . When users provide their personal and often sensitive information to a third-party , they assume that the data will remain private, confidential and protected. 1. Reduce liability in case of a breach . In case of a breach, if an intruder gets hold of user data, they won\u2019t be able to benefit from it if you only store and transmit encrypted data. At the current rate breaches happen every 39 seconds 1 . Yep, you read it correctly. Comply with regulations . Depending on the location of your users (European, Californian, etc.) you are likely to be subject to regulation such as GDPR and CCPA imposing high standards in terms of user data privacy protection. Encrypting data, end-to-end, will meet compliance standards with regards to such regulations. In short, there is no excuse not to protect user data. With blindnet, your application can ensure the highest level of integrity every time you retain or access sensitive information. In other words, whenever you process data that your service is not exploiting to generate value, keeping it unencrypted makes it only a liability for you. Is blindnet a Trusted Third Party? # No. blindnet does not nor will ever have access to the data that transmits through its network. Therefore, we are a zero-trust third party. We constructed our services to ensure that user data stays protected, end-to-end. A Trusted Third Party is a software provider that has an ability to store, access or read user data. . You have to trust that they will do nothing to compromise the data you have provided. However, one can never be too cautious. At blindnet, we believe that internet users deserve better than to be at the mercy of a Trusted Third Party. Our goal is to break from this retrograde model, and offer a technological solution, such that blindnet (and in many cases even your client systems too) has no way of decrypting and reading the actual user data. You don\u2019t need to trust that blindnet will not read and misuse your users\u2019 data, because we simply can\u2019t. You can also go and inspect our source code on github, and make sure that our implementations are consistent with this core promise. If I use blindnet, will I be GDPR-compliant (EU)? # Yes. The Article 32 of GDPR requires everyone who processes user information to apply appropriate techniques of protection; encryption being one of them. blindnet is designed to offer protection for even the most sensitive data, as it offers end-to-end encryption. However, in addition to security of data transfers, GDPR grants users many additional rights. Using blindnet is not a guarantee that your system will be compliant with this regulation in all other aspects. Being a software company, we also do not offer any legal advice, but we can strongly recommend that you have your data treatment practices reviewed by a lawyer. If I use blindnet, will I be HIPAA-compliant (USA)? # If I use blindnet, will I be HDS-compliant(FR)? # Yes. First blindnet helps you store encrypted information. Even medical information, in its encrypted form, can not officially be considered medical information since the content bears no semantics in that particular form. However, blindnet does use HDS-compliant cloud storage providers, just to be safe. If you have any questions, or you want to use blindent on a particular cloud storage that you prefer, please get in touch with our support team. What is the difference between Blindnet.init(token) and blindnet.connect(blindnetSecret) # Blindnet.init(token) is about initialising blindnet SDK itself, since blindnet API requires a JWT to authenticate the requests, and the token passed as argument is actually the JWT that you generate on your backend . Instead of passing the token on each SDK function call, the SDK maintains the state and uses the token in each call to our API. This is why when the token expires you need to refresh it. blindnet.connect(blindnetSecret) is about logging your users to blindnet. When this method is called, the SDK uses blindnetSecret (argument to the connect function) to initiate the user's private keys, and then stores them to be used later when decrypting documents. \"At the end of 2016, a business fell victim to a ransomware attack every 40 seconds. Cybersecurity Ventures predicts that will rise to every 14 seconds by 2019 \u2014 and every 11 seconds by 2021\". Cybersecurity Ventures report A Clark School study is one of the first to quantify the near-constant rate of hacker attacks of computers with Internet access\u2014every 39 seconds on average\u2014and the non-secure usernames and passwords we use that give attackers more chance of success. Study \u21a9","title":"Q&A"},{"location":"other/qna.html#what_is_end-to-end_encryption","text":"End-to-end encryption is an approach in which a software system encrypts data upon capture, supports encryption throughout transfer, and allows for data decrypting only at the endpoint of their consumption. In such a way user data is not accessible in the non-encrypted form at any central entity. Encryption is a process of converting a readable dataset into code in order to prevent unauthorized access. End-to-end encryption is a functionality in which a software system protects the data through its entire life cycle, from end-point capture and transit to storage and access.The intent of end-to-end encryption is to ensure that data is available only to authorized users and unreadable to anyone else. The classic client-server architecture of internet software applications introduced the idea of centralized data storage on cloud or on-prem servers, while keeping software running on endpoints (i.e. the interfaces through which the users interact with the system), light in functionality, often reduced to data display and data entry. While convenient, this approach rests on the exposure of mass quantities of confidential user information to both data breaches (external threats) and misuse (internal threats). Due to growing concerns for user privacy, end-to-end encryption quickly gained ground over the last decade . Signal protocol has been recognized as a golden standard in the developer community. It is used across various applications, including widely popular WhatsApp. Through Signal protocol, users\u2019 messages are encrypted on their devices and exchanged with other users without the ability for the central entity to decrypt and access those messages. . The cryptographic primitives are exchanged in such a way that only the endpoints (sender and receiver) have access to the necessary decryption keys. End-to-end encryption is currently spreading to various other businesses, augmenting the classic client-server architecture, and allowing developers to make privacy-first software in many other use-cases. Blindnet offers a simple solution to developers to embed end-to-end encryption in their software architecture, protect user data and limit exposure and liabilities to only critical sensitive information.","title":"What is End-to-end Encryption?"},{"location":"other/qna.html#why_do_i_need_end-to-end_encryption","text":"Fulfil users expectations and earn their trust . When users provide their personal and often sensitive information to a third-party , they assume that the data will remain private, confidential and protected. 1. Reduce liability in case of a breach . In case of a breach, if an intruder gets hold of user data, they won\u2019t be able to benefit from it if you only store and transmit encrypted data. At the current rate breaches happen every 39 seconds 1 . Yep, you read it correctly. Comply with regulations . Depending on the location of your users (European, Californian, etc.) you are likely to be subject to regulation such as GDPR and CCPA imposing high standards in terms of user data privacy protection. Encrypting data, end-to-end, will meet compliance standards with regards to such regulations. In short, there is no excuse not to protect user data. With blindnet, your application can ensure the highest level of integrity every time you retain or access sensitive information. In other words, whenever you process data that your service is not exploiting to generate value, keeping it unencrypted makes it only a liability for you.","title":"Why do I need End-to-end Encryption"},{"location":"other/qna.html#is_blindnet_a_trusted_third_party","text":"No. blindnet does not nor will ever have access to the data that transmits through its network. Therefore, we are a zero-trust third party. We constructed our services to ensure that user data stays protected, end-to-end. A Trusted Third Party is a software provider that has an ability to store, access or read user data. . You have to trust that they will do nothing to compromise the data you have provided. However, one can never be too cautious. At blindnet, we believe that internet users deserve better than to be at the mercy of a Trusted Third Party. Our goal is to break from this retrograde model, and offer a technological solution, such that blindnet (and in many cases even your client systems too) has no way of decrypting and reading the actual user data. You don\u2019t need to trust that blindnet will not read and misuse your users\u2019 data, because we simply can\u2019t. You can also go and inspect our source code on github, and make sure that our implementations are consistent with this core promise.","title":"Is blindnet a Trusted Third Party?"},{"location":"other/qna.html#if_i_use_blindnet_will_i_be_gdpr-compliant_eu","text":"Yes. The Article 32 of GDPR requires everyone who processes user information to apply appropriate techniques of protection; encryption being one of them. blindnet is designed to offer protection for even the most sensitive data, as it offers end-to-end encryption. However, in addition to security of data transfers, GDPR grants users many additional rights. Using blindnet is not a guarantee that your system will be compliant with this regulation in all other aspects. Being a software company, we also do not offer any legal advice, but we can strongly recommend that you have your data treatment practices reviewed by a lawyer.","title":"If I use blindnet, will I be GDPR-compliant (EU)?"},{"location":"other/qna.html#if_i_use_blindnet_will_i_be_hipaa-compliant_usa","text":"","title":"If I use blindnet, will I be HIPAA-compliant (USA)?"},{"location":"other/qna.html#if_i_use_blindnet_will_i_be_hds-compliantfr","text":"Yes. First blindnet helps you store encrypted information. Even medical information, in its encrypted form, can not officially be considered medical information since the content bears no semantics in that particular form. However, blindnet does use HDS-compliant cloud storage providers, just to be safe. If you have any questions, or you want to use blindent on a particular cloud storage that you prefer, please get in touch with our support team.","title":"If I use blindnet, will I be HDS-compliant(FR)?"},{"location":"other/qna.html#what_is_the_difference_between_blindnetinittoken_and_blindnetconnectblindnetsecret","text":"Blindnet.init(token) is about initialising blindnet SDK itself, since blindnet API requires a JWT to authenticate the requests, and the token passed as argument is actually the JWT that you generate on your backend . Instead of passing the token on each SDK function call, the SDK maintains the state and uses the token in each call to our API. This is why when the token expires you need to refresh it. blindnet.connect(blindnetSecret) is about logging your users to blindnet. When this method is called, the SDK uses blindnetSecret (argument to the connect function) to initiate the user's private keys, and then stores them to be used later when decrypting documents. \"At the end of 2016, a business fell victim to a ransomware attack every 40 seconds. Cybersecurity Ventures predicts that will rise to every 14 seconds by 2019 \u2014 and every 11 seconds by 2021\". Cybersecurity Ventures report A Clark School study is one of the first to quantify the near-constant rate of hacker attacks of computers with Internet access\u2014every 39 seconds on average\u2014and the non-secure usernames and passwords we use that give attackers more chance of success. Study \u21a9","title":"What is the difference between Blindnet.init(token) and blindnet.connect(blindnetSecret)"},{"location":"release_notes/index.html","text":"","title":"v0.9.2"},{"location":"troubleshooting/index.html","text":"Error reference # Client SDK # Javascript Server SDK #","title":"Troubleshooting"},{"location":"troubleshooting/index.html#error_reference","text":"","title":"Error reference"},{"location":"troubleshooting/index.html#client_sdk","text":"Javascript","title":"Client SDK"},{"location":"troubleshooting/index.html#server_sdk","text":"","title":"Server SDK"},{"location":"troubleshooting/error_reference/client/javascript.html","text":"Errors can arise during the usage of the blindnet SDK and should be handled accordingly. Error types can be imported as: 1 import { error as blindnetError } from '@blindnet/sdk-javascript' and handled the following way 1 2 3 4 5 6 7 8 try { await blindnet . decrypt ( data ) } catch ( e ) { if ( e instanceof blindnetError . AuthenticationError ) { const newToken = await getToken () // your function to obtain token blindnet . refreshToken ( newToken ) } else if ( e instanceof blindnetError . NoAccessError ) // notify the user about the problem } or 1 2 3 4 5 6 7 blindnet . decrypt ( data ). catch ( async e => { if ( e instanceof blindnetError . AuthenticationError ) { const newToken = await getToken () // your function to obtain token blindnet . refreshToken ( newToken ) } else if ( e instanceof blindnetError . NoAccessError ) // notify the user about the problem }) This page describes the different types of errors that can arise in the JavaScript Client SDK. AuthenticationError # explanation : Token is invalid or has expired. api methods : All SDK methods except init , deriveSecrets and disconnect solution : Generate a new token on the backend and pass it to the console. UserNotInitializedError # explanation : User\u2019s keys are missing from the browser's IndexedDB. This means either the user is not registered in blindnet or the keys have been manually deleted. api methods : decrypt , decryptValues , changeSecret , giveAccess solution : Call connect method to get the keys. PasswordError # explanation : Wrong password is provided. The secret is different from the one provided when a user has registered or changed it so stored encrypted keys can\u2019t be decrypted. api methods : connect EncryptionError # explanation : Encrypted data can\u2019t be decrypted. This means either the encrypted data or the encrypted data key has been tampered with, or the wrong encrypted data or data id has been provided. api methods : decrypt , decryptValues BlindnetServiceError explanation : Unexpected error occurred. Either the SDK wasn\u2019t able to reach the blindnet server or there was an error on the server. api methods : all SDK methods except init, deriveSecrets and disconnect . solution : Retry the method call NotEncryptableError # explanation : Data can\u2019t be encrypted. A user group or empty or no user id was passed to generate a token. api methods : encrypt , encryptValues solution : Add users to the group or generate a token with non-empty user id list. NoAccessError # explanation : A user can\u2019t decrypt the data. A user is missing the encryption keys for the encrypted data. api methods : decrypt , decryptValues solution : Another user with access has to give her the access with the method giveAccess. UserNotFoundError # explanation : A user who is being given access to a document is not registered into blindnet api methods : giveAccess , changeSecret solution : The user being given access to has to register to blindnet using the connect method. BadFormatError # explanation : Format of data or metadata passed to encrypting methods is not in the supported format. api methods : encrypt , encryptValues solution : Check the supported formats and convert the data accordingly. Firefox problem with IndexedDB. # explanation : Firefox doesn\u2019t support IndexedDB in private browsing mode. Uncaught (in promise) DOMException: A mutation operation was attempted on a database that did not allow mutations is returned. solution : Warn a user not to use the private browsing mode on Firefox. IE problem. # explanation : Internet explorer has very limited support for web crypto api so the blindnet SDK doesn\u2019t work on it. solution : Warn a user to use a different browser.","title":"JavaScript"},{"location":"troubleshooting/error_reference/client/javascript.html#authenticationerror","text":"explanation : Token is invalid or has expired. api methods : All SDK methods except init , deriveSecrets and disconnect solution : Generate a new token on the backend and pass it to the console.","title":"AuthenticationError"},{"location":"troubleshooting/error_reference/client/javascript.html#usernotinitializederror","text":"explanation : User\u2019s keys are missing from the browser's IndexedDB. This means either the user is not registered in blindnet or the keys have been manually deleted. api methods : decrypt , decryptValues , changeSecret , giveAccess solution : Call connect method to get the keys.","title":"UserNotInitializedError"},{"location":"troubleshooting/error_reference/client/javascript.html#passworderror","text":"explanation : Wrong password is provided. The secret is different from the one provided when a user has registered or changed it so stored encrypted keys can\u2019t be decrypted. api methods : connect","title":"PasswordError"},{"location":"troubleshooting/error_reference/client/javascript.html#encryptionerror","text":"explanation : Encrypted data can\u2019t be decrypted. This means either the encrypted data or the encrypted data key has been tampered with, or the wrong encrypted data or data id has been provided. api methods : decrypt , decryptValues BlindnetServiceError explanation : Unexpected error occurred. Either the SDK wasn\u2019t able to reach the blindnet server or there was an error on the server. api methods : all SDK methods except init, deriveSecrets and disconnect . solution : Retry the method call","title":"EncryptionError"},{"location":"troubleshooting/error_reference/client/javascript.html#notencryptableerror","text":"explanation : Data can\u2019t be encrypted. A user group or empty or no user id was passed to generate a token. api methods : encrypt , encryptValues solution : Add users to the group or generate a token with non-empty user id list.","title":"NotEncryptableError"},{"location":"troubleshooting/error_reference/client/javascript.html#noaccesserror","text":"explanation : A user can\u2019t decrypt the data. A user is missing the encryption keys for the encrypted data. api methods : decrypt , decryptValues solution : Another user with access has to give her the access with the method giveAccess.","title":"NoAccessError"},{"location":"troubleshooting/error_reference/client/javascript.html#usernotfounderror","text":"explanation : A user who is being given access to a document is not registered into blindnet api methods : giveAccess , changeSecret solution : The user being given access to has to register to blindnet using the connect method.","title":"UserNotFoundError"},{"location":"troubleshooting/error_reference/client/javascript.html#badformaterror","text":"explanation : Format of data or metadata passed to encrypting methods is not in the supported format. api methods : encrypt , encryptValues solution : Check the supported formats and convert the data accordingly.","title":"BadFormatError"},{"location":"troubleshooting/error_reference/client/javascript.html#firefox_problem_with_indexeddb","text":"explanation : Firefox doesn\u2019t support IndexedDB in private browsing mode. Uncaught (in promise) DOMException: A mutation operation was attempted on a database that did not allow mutations is returned. solution : Warn a user not to use the private browsing mode on Firefox.","title":"Firefox problem with IndexedDB."},{"location":"troubleshooting/error_reference/client/javascript.html#ie_problem","text":"explanation : Internet explorer has very limited support for web crypto api so the blindnet SDK doesn\u2019t work on it. solution : Warn a user to use a different browser.","title":"IE problem."}]}; var __search = { index: Promise.resolve(local_index) }