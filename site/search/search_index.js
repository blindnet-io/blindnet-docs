const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"delete_me.html","text":"Welcome to MkDocs # For full documentation visit mkdocs.org . yo yo yo admonitions # The range () function is used to generate a sequence of numbers. javascript yarn add blindnet import { Blindnet } from 'blindnet' C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } no title custom title this is some code const x = 10 function asd ( xx : string ) : Promise < void > { return x + xx } text yo # Commands # mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Asd # const x = 10 function asd ( xx : string ) : Promise < void > { return x + xx } Project layout # mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"delete_me.html#welcome_to_mkdocs","text":"For full documentation visit mkdocs.org . yo yo yo","title":"Welcome to MkDocs"},{"location":"delete_me.html#admonitions","text":"The range () function is used to generate a sequence of numbers. javascript yarn add blindnet import { Blindnet } from 'blindnet' C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } no title custom title this is some code const x = 10 function asd ( xx : string ) : Promise < void > { return x + xx } text","title":"admonitions"},{"location":"delete_me.html#yo","text":"","title":"yo"},{"location":"delete_me.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"delete_me.html#asd","text":"const x = 10 function asd ( xx : string ) : Promise < void > { return x + xx }","title":"Asd"},{"location":"delete_me.html#project_layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"quickstart.html","text":"Try out blindnet SDK quickly and easily. Note While reading this quickstart guide you can download and follow the source code for a simple React front-end app with integrated blindnet client SDK from here . In this quickstart guide, you will learn how to encrypt and decrypt a file using the blindnet client SDK . We assume two users exist - a user we know, Alice , and an anonymous user Bob . For the sake of simplicity we\u2019ll act as both Alice and Bob. We will register a known user Alice to blindnet, encrypt a file to her as an anonymous user Bob, and then decrypt the file as Alice. You will learn how to: set-up the blindnet SDK register Alice to blindnet encrypt a file as Bob decrypt a file as Alice Before you start # Obtain blindnet authentication data. To authenticate to blindnet, your application needs the application id and application key . Application key is a cryptographic secret key which is used to sign the authentication tokens and must be kept secret (and accessible by your server). You can get the application id and application key using the blindnet dashboard after you create a new application . Note For the sake of simplicity, you can skip creating a new application and just use the following application id and key id: d8874507-c77e-4659-9f6a-d903f9d8d98e key: mUWnnwzLXXbVYzX3p7Q/tvGHkB28J0ljVtkPJ9gUgGvdXko0kqqxaQ1DPqxxjgd7wbxriqtMaEhhITdD46gjxg== Be sure not to use those in production environments! STEP 1 : Set-up the SDK # In this guide, only the client SDK is needed. To generate the authentication tokens, we will use a dedicated client library . In your production environment, you will need both client and server SDKs and generate the tokens on the server side. Installation # To install the blindnet SDK and the token generator javascript npm i -S @blindnet/sdk-javascript @blindnet/token-generator or yarn add @blindnet/sdk-javascript @blindnet/token-generator Import # Import the library to your project with javascript 1 2 import { Blindnet } from '@blindnet/sdk-javascript' import { createTempUserToken , createUserToken } from '@blindnet/token-generator' Generate a user token for Alice # Tokens are used to authenticate the users of your application to blindnet. They can be used multiple times and should be regenerated when they expire using the same method. Warning We use the token generation library to generate the tokens. It should be only used for testing purposes and tokens should be generated on the server in production environment, after your user is authenticated. Use the application id and key you obtained in Before you start section. JavaScript 1 2 3 4 5 const appId = \u2018 your_application_id \u2019 const appKey = \u2018 your_application_key \u2019 const aliceId = \u2018 alice \u2019 const groupId = test - group \u2019 const token = await createUserToken ( aliceId , groupId , appId , appKey ) Specify the testing endpoint and initialize the library for Alice JavaScript 1 2 const endpoint = ' https : //test.blindnet.io\u2019 const blindnet = Blindnet . init ( token , endpoint ) Connect Alice to blindnet # Blindnet can encrypt files with a particular destination (list of users or a user group ) in mind. So in order to start encrypting, you first need to have some users (Alice in this case) that you\u2019ve connected to blindnet. To connect a user to blindnet, a secret value has to be provided. That value must only be known by the user (e.g. user's password). In that case, it\u2019s important not to use the same value to log-into your system and connect to blindnet for which we provide a method deriveSecrets . JavaScript 1 2 const { appSecret , blindnetSecret } = await Blindnet . deriveSecrets ( secret ) await blindnet . connect ( blindnetSecret ) Note You can use appSecret as a password for the user to log-into your system. STEP 2 : Encrypt a file # After Alice has connected to blindnet, data can be encrypted for her. We will simulate an anonymous user Bob encrypting a file for Alice. Initialize SDK for Bob # You need to initialize the library with the temporary token in order to encrypt the data. Pass the ids of the users you want to encrypt a file to. JavaScript 1 2 const token = await createTempUserToken ([ aliceId ], appId , appKey ) const blindnet = Blindnet . init ( token , endpoint ) Encrypt a file # Obtain a file from the <input type=\"file\" id=\"file-pick> HTML element and pass it to the encrypt method. JavaScript 1 2 const file = document . getElementById ( \u2018 file - pick \u2019 ). files [ 0 ] const { encryptedData } = await blindnet . encrypt ( file ) encryptedData should be stored by you. STEP 3 : Decrypt a file # To decrypt a file, you only need encryptedData . JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) There is a convenient library to save files file-saver . 1 saveAs ( data , metadata . dataType . name )","title":"Quick start"},{"location":"quickstart.html#before_you_start","text":"Obtain blindnet authentication data. To authenticate to blindnet, your application needs the application id and application key . Application key is a cryptographic secret key which is used to sign the authentication tokens and must be kept secret (and accessible by your server). You can get the application id and application key using the blindnet dashboard after you create a new application . Note For the sake of simplicity, you can skip creating a new application and just use the following application id and key id: d8874507-c77e-4659-9f6a-d903f9d8d98e key: mUWnnwzLXXbVYzX3p7Q/tvGHkB28J0ljVtkPJ9gUgGvdXko0kqqxaQ1DPqxxjgd7wbxriqtMaEhhITdD46gjxg== Be sure not to use those in production environments!","title":"Before you start"},{"location":"quickstart.html#step_1_set-up_the_sdk","text":"In this guide, only the client SDK is needed. To generate the authentication tokens, we will use a dedicated client library . In your production environment, you will need both client and server SDKs and generate the tokens on the server side.","title":"STEP 1: Set-up the SDK"},{"location":"quickstart.html#installation","text":"To install the blindnet SDK and the token generator javascript npm i -S @blindnet/sdk-javascript @blindnet/token-generator or yarn add @blindnet/sdk-javascript @blindnet/token-generator","title":"Installation"},{"location":"quickstart.html#import","text":"Import the library to your project with javascript 1 2 import { Blindnet } from '@blindnet/sdk-javascript' import { createTempUserToken , createUserToken } from '@blindnet/token-generator'","title":"Import"},{"location":"quickstart.html#generate_a_user_token_for_alice","text":"Tokens are used to authenticate the users of your application to blindnet. They can be used multiple times and should be regenerated when they expire using the same method. Warning We use the token generation library to generate the tokens. It should be only used for testing purposes and tokens should be generated on the server in production environment, after your user is authenticated. Use the application id and key you obtained in Before you start section. JavaScript 1 2 3 4 5 const appId = \u2018 your_application_id \u2019 const appKey = \u2018 your_application_key \u2019 const aliceId = \u2018 alice \u2019 const groupId = test - group \u2019 const token = await createUserToken ( aliceId , groupId , appId , appKey ) Specify the testing endpoint and initialize the library for Alice JavaScript 1 2 const endpoint = ' https : //test.blindnet.io\u2019 const blindnet = Blindnet . init ( token , endpoint )","title":"Generate a user token for Alice"},{"location":"quickstart.html#connect_alice_to_blindnet","text":"Blindnet can encrypt files with a particular destination (list of users or a user group ) in mind. So in order to start encrypting, you first need to have some users (Alice in this case) that you\u2019ve connected to blindnet. To connect a user to blindnet, a secret value has to be provided. That value must only be known by the user (e.g. user's password). In that case, it\u2019s important not to use the same value to log-into your system and connect to blindnet for which we provide a method deriveSecrets . JavaScript 1 2 const { appSecret , blindnetSecret } = await Blindnet . deriveSecrets ( secret ) await blindnet . connect ( blindnetSecret ) Note You can use appSecret as a password for the user to log-into your system.","title":"Connect Alice to blindnet"},{"location":"quickstart.html#step_2_encrypt_a_file","text":"After Alice has connected to blindnet, data can be encrypted for her. We will simulate an anonymous user Bob encrypting a file for Alice.","title":"STEP 2: Encrypt a file"},{"location":"quickstart.html#initialize_sdk_for_bob","text":"You need to initialize the library with the temporary token in order to encrypt the data. Pass the ids of the users you want to encrypt a file to. JavaScript 1 2 const token = await createTempUserToken ([ aliceId ], appId , appKey ) const blindnet = Blindnet . init ( token , endpoint )","title":"Initialize SDK for Bob"},{"location":"quickstart.html#encrypt_a_file","text":"Obtain a file from the <input type=\"file\" id=\"file-pick> HTML element and pass it to the encrypt method. JavaScript 1 2 const file = document . getElementById ( \u2018 file - pick \u2019 ). files [ 0 ] const { encryptedData } = await blindnet . encrypt ( file ) encryptedData should be stored by you.","title":"Encrypt a file"},{"location":"quickstart.html#step_3_decrypt_a_file","text":"To decrypt a file, you only need encryptedData . JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) There is a convenient library to save files file-saver . 1 saveAs ( data , metadata . dataType . name )","title":"STEP 3: Decrypt a file"},{"location":"start.html","text":"Installation The following languages are currently supported for the client SDK: Client SDK: Javascript Server SDK: PHP C# Imports The blindnet SDK api is enclosed in the Blindnet module. It should be imported together with the error types and optionally, utils (e.g. to encode and decode the encrypted data). Client SDK: Javascript Server SDK: PHP C#","title":"Start"},{"location":"api_reference/index.html","text":"Client SDK # Javascript Server SDK # PHP","title":"Api reference"},{"location":"api_reference/index.html#client_sdk","text":"Javascript","title":"Client SDK"},{"location":"api_reference/index.html#server_sdk","text":"PHP","title":"Server SDK"},{"location":"api_reference/client/javascript/0.1.3.html","text":"Installation # Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > Imports # If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class. Initialization # Blindnet SDK must be initialized before you can use it (with the exception of the secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet Parameters # name type required description token string true Authentication token generated by server SDK. For more information, click here . endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io Return type # Blindnet Instance which you use to call SDK methods. 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret ) Refreshing the session # After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void Parameters # name type required description token string true Authentication token generated by server SDK. For more information, click here . Return type # void Logging-in # A user must be logged-into to blindnet before using any Blindnet api methods (with the exception of encrypting). The user can both register and log-in with the method connect. function connect ( secret : string ) : Promise < void > Parameters # name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys. Usually, should be derived from user\u2019s password using the deriveSecrets method Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server.. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys. Deriving secrets # User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be splitted into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } > Parameters # name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question. Return type # Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application. Logging-out # After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect () Changing login secret # If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void > Parameters # name type required description newSecret string true A new secret used to encrypt user\u2019s keys. oldSecret string false Current secret used to encrypt user\u2019s keys. If the user is currently not logged into blindnet, it should be provided into the method. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet. Encrypting # function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any }) : Promise < { dataId : string , encryptedData : ArrayBuffer } > Parameters # name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Can be of any type specified. metadata { [key: string]: any } false Metadata in JSON format. Return type # Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a file using the server SDK. encryptedData can be encoded using toBase64 and toHex methods. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Either provided data or metadata has the wrong type. NotEncryptabeError There are no users to encrypt the data to. Encrypting values # This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } > Parameters # name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings. Return type # Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a file using the server SDK. encryptedData is a JavaScript object with encrypted values, encoded to hex encoding. Object keys are left in plain text. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Provided data is not the expected type. NotEncryptabeError There are no users to encrypt the data to. Decrypting # function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; } } > Parameters # name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (result of encrypt method). If it was encoded, it can be decoded using fromBase64 or fromHex . Return type # Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; } }> type DataType = { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Decrypting values # This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string }) : Promise < { data : { [ key : string ] : string } } > Parameters # name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method. Return type # Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Giving access to a user # A user can give access to encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void > Parameters # name type required description userId string true Id of a user to whom access is being given. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet. Helper methods # Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util Encoding # Result of the encrypt method is used as a parameter in the following methods: Encode to base64 string # function toBase64 ( encryptedData : ArrayBuffer ) : string Encode to hexadecimal string # function toHex ( encryptedData : ArrayBuffer ) : string Decoding # A base64 or hex encoded string can be decoded into ArrayBuffer and passed to decrypt method using the following methods: Decode from base64 string # function fromBase64 ( encoded : string ) : ArrayBuffer Decode from hexadecimal string # function fromHex ( encoded : string ) : ArrayBuffer","title":"v0.1.3"},{"location":"api_reference/client/javascript/0.1.3.html#installation","text":"Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script >","title":"Installation"},{"location":"api_reference/client/javascript/0.1.3.html#imports","text":"If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class.","title":"Imports"},{"location":"api_reference/client/javascript/0.1.3.html#initialization","text":"Blindnet SDK must be initialized before you can use it (with the exception of the secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet","title":"Initialization"},{"location":"api_reference/client/javascript/0.1.3.html#parameters","text":"name type required description token string true Authentication token generated by server SDK. For more information, click here . endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type","text":"Blindnet Instance which you use to call SDK methods. 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret )","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#refreshing_the_session","text":"After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void","title":"Refreshing the session"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_1","text":"name type required description token string true Authentication token generated by server SDK. For more information, click here .","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_1","text":"void","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#logging-in","text":"A user must be logged-into to blindnet before using any Blindnet api methods (with the exception of encrypting). The user can both register and log-in with the method connect. function connect ( secret : string ) : Promise < void >","title":"Logging-in"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_2","text":"name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys. Usually, should be derived from user\u2019s password using the deriveSecrets method","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_2","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#errors","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server.. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.3.html#deriving_secrets","text":"User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be splitted into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } >","title":"Deriving secrets"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_3","text":"name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_3","text":"Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#logging-out","text":"After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect ()","title":"Logging-out"},{"location":"api_reference/client/javascript/0.1.3.html#changing_login_secret","text":"If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void >","title":"Changing login secret"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_4","text":"name type required description newSecret string true A new secret used to encrypt user\u2019s keys. oldSecret string false Current secret used to encrypt user\u2019s keys. If the user is currently not logged into blindnet, it should be provided into the method.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_4","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#errors_1","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.3.html#encrypting","text":"function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any }) : Promise < { dataId : string , encryptedData : ArrayBuffer } >","title":"Encrypting"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_5","text":"name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Can be of any type specified. metadata { [key: string]: any } false Metadata in JSON format.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_5","text":"Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a file using the server SDK. encryptedData can be encoded using toBase64 and toHex methods.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#errors_2","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Either provided data or metadata has the wrong type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.3.html#encrypting_values","text":"This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } >","title":"Encrypting values"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_6","text":"name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_6","text":"Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a file using the server SDK. encryptedData is a JavaScript object with encrypted values, encoded to hex encoding. Object keys are left in plain text.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#errors_3","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Provided data is not the expected type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.3.html#decrypting","text":"function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; } } >","title":"Decrypting"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_7","text":"name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (result of encrypt method). If it was encoded, it can be decoded using fromBase64 or fromHex .","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_7","text":"Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; } }> type DataType = { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#errors_4","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.3.html#decrypting_values","text":"This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string }) : Promise < { data : { [ key : string ] : string } } >","title":"Decrypting values"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_8","text":"name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_8","text":"Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#errors_5","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.3.html#giving_access_to_a_user","text":"A user can give access to encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void >","title":"Giving access to a user"},{"location":"api_reference/client/javascript/0.1.3.html#parameters_9","text":"name type required description userId string true Id of a user to whom access is being given.","title":"Parameters"},{"location":"api_reference/client/javascript/0.1.3.html#return_type_9","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/0.1.3.html#errors_6","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/0.1.3.html#helper_methods","text":"Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util","title":"Helper methods"},{"location":"api_reference/client/javascript/0.1.3.html#encoding","text":"Result of the encrypt method is used as a parameter in the following methods:","title":"Encoding"},{"location":"api_reference/client/javascript/0.1.3.html#encode_to_base64_string","text":"function toBase64 ( encryptedData : ArrayBuffer ) : string","title":"Encode to base64 string"},{"location":"api_reference/client/javascript/0.1.3.html#encode_to_hexadecimal_string","text":"function toHex ( encryptedData : ArrayBuffer ) : string","title":"Encode to hexadecimal string"},{"location":"api_reference/client/javascript/0.1.3.html#decoding","text":"A base64 or hex encoded string can be decoded into ArrayBuffer and passed to decrypt method using the following methods:","title":"Decoding"},{"location":"api_reference/client/javascript/0.1.3.html#decode_from_base64_string","text":"function fromBase64 ( encoded : string ) : ArrayBuffer","title":"Decode from base64 string"},{"location":"api_reference/client/javascript/0.1.3.html#decode_from_hexadecimal_string","text":"function fromHex ( encoded : string ) : ArrayBuffer","title":"Decode from hexadecimal string"},{"location":"api_reference/client/javascript/latest.html","text":"Installation # Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > Imports # If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class. Initialization # Blindnet SDK must be initialized before you can use it (with the exception of the secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet Parameters # name type required description token string true Authentication token generated by server SDK. For more information, click here . endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io Return type # Blindnet Instance which you use to call SDK methods. 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret ) Refreshing the session # After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void Parameters # name type required description token string true Authentication token generated by server SDK. For more information, click here . Return type # void Logging-in # A user must be logged-into to blindnet before using any Blindnet api methods (with the exception of encrypting). The user can both register and log-in with the method connect. function connect ( secret : string ) : Promise < void > Parameters # name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys. Usually, should be derived from user\u2019s password using the deriveSecrets method Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server.. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys. Deriving secrets # User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be splitted into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } > Parameters # name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question. Return type # Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application. Logging-out # After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect () Changing login secret # If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void > Parameters # name type required description newSecret string true A new secret used to encrypt user\u2019s keys. oldSecret string false Current secret used to encrypt user\u2019s keys. If the user is currently not logged into blindnet, it should be provided into the method. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet. Encrypting # function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any }) : Promise < { dataId : string , encryptedData : ArrayBuffer } > Parameters # name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Can be of any type specified. metadata { [key: string]: any } false Metadata in JSON format. Return type # Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a file using the server SDK. encryptedData can be encoded using toBase64 and toHex methods. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Either provided data or metadata has the wrong type. NotEncryptabeError There are no users to encrypt the data to. Encrypting values # This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } > Parameters # name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings. Return type # Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a file using the server SDK. encryptedData is a JavaScript object with encrypted values, encoded to hex encoding. Object keys are left in plain text. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Provided data is not the expected type. NotEncryptabeError There are no users to encrypt the data to. Decrypting # function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; } } > Parameters # name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (result of encrypt method). If it was encoded, it can be decoded using fromBase64 or fromHex . Return type # Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; } }> type DataType = { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Decrypting values # This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string }) : Promise < { data : { [ key : string ] : string } } > Parameters # name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method. Return type # Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet. Giving access to a user # A user can give access to encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void > Parameters # name type required description userId string true Id of a user to whom access is being given. Return type # Promise<void> The operation succeeded if an exception wasn\u2019t thrown. Errors # type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet. Helper methods # Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util Encoding # Result of the encrypt method is used as a parameter in the following methods: Encode to base64 string # function toBase64 ( encryptedData : ArrayBuffer ) : string Encode to hexadecimal string # function toHex ( encryptedData : ArrayBuffer ) : string Decoding # A base64 or hex encoded string can be decoded into ArrayBuffer and passed to decrypt method using the following methods: Decode from base64 string # function fromBase64 ( encoded : string ) : ArrayBuffer Decode from hexadecimal string # function fromHex ( encoded : string ) : ArrayBuffer","title":"latest"},{"location":"api_reference/client/javascript/latest.html#installation","text":"Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script >","title":"Installation"},{"location":"api_reference/client/javascript/latest.html#imports","text":"If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet The api is encapsulated in the Blindnet class.","title":"Imports"},{"location":"api_reference/client/javascript/latest.html#initialization","text":"Blindnet SDK must be initialized before you can use it (with the exception of the secret derivation method). Initialization is done with the init method. static function init ( token : string , endpoint? : string ) : Blindnet","title":"Initialization"},{"location":"api_reference/client/javascript/latest.html#parameters","text":"name type required description token string true Authentication token generated by server SDK. For more information, click here . endpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io . For testing, use https://test.blindnet.io","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type","text":"Blindnet Instance which you use to call SDK methods. 1 2 const blindnet = Blindnet . init ( token ) blindnet . connect ( secret )","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#refreshing_the_session","text":"After the token expires, AuthenticationError will be thrown on api calls. Generate a new token using server SDK and call refreshToken . function refreshToken ( token : string ) : void","title":"Refreshing the session"},{"location":"api_reference/client/javascript/latest.html#parameters_1","text":"name type required description token string true Authentication token generated by server SDK. For more information, click here .","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_1","text":"void","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#logging-in","text":"A user must be logged-into to blindnet before using any Blindnet api methods (with the exception of encrypting). The user can both register and log-in with the method connect. function connect ( secret : string ) : Promise < void >","title":"Logging-in"},{"location":"api_reference/client/javascript/latest.html#parameters_2","text":"name type required description secret string true A secret value used to encrypt and decrypt user\u2019s keys. Usually, should be derived from user\u2019s password using the deriveSecrets method","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_2","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server.. PasswordError A bad secret has been provided. Could not decrypt the user\u2019s keys.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#deriving_secrets","text":"User\u2019s password is a sensitive data. As it can be used both to log-into your application and to encrypt user\u2019s keys in blindnet, it should be splitted into two parts and each part should be used for different purposes. function deriveSecrets ( password : string ) : Promise < { blindnetSecret : string , appSecret : string } >","title":"Deriving secrets"},{"location":"api_reference/client/javascript/latest.html#parameters_3","text":"name type required description password string true A value generated by a user. It can be the user's password or e.g. answer to a security question.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_3","text":"Promise<{ blindnetSecret: string, appSecret: string }> If a user's log-in password is used as an input parameter, use blindnetSecret in the connect method and appSecret to log-into your application.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#logging-out","text":"After the user is logged out of your app, following method should be called to clean the user\u2019s keys from the browser Blindnet . disconnect ()","title":"Logging-out"},{"location":"api_reference/client/javascript/latest.html#changing_login_secret","text":"If an app password is used to log-in users into blindnet, make sure to call this method after a user changes the password. Remember to call deriveSecrets . function changeSecret ( newSecret : string , oldSecret? : string ) : Promise < void >","title":"Changing login secret"},{"location":"api_reference/client/javascript/latest.html#parameters_4","text":"name type required description newSecret string true A new secret used to encrypt user\u2019s keys. oldSecret string false Current secret used to encrypt user\u2019s keys. If the user is currently not logged into blindnet, it should be provided into the method.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_4","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_1","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. PasswordError Bad oldSecret is provided. UserNotInitializedError A user is not logged into blindnet and oldSecret is not provided. UserNotFoundError A user was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#encrypting","text":"function encrypt ( data : string | File | ArrayBuffer | Uint8Array , metadata ?: { [ key : string ] : any }) : Promise < { dataId : string , encryptedData : ArrayBuffer } >","title":"Encrypting"},{"location":"api_reference/client/javascript/latest.html#parameters_5","text":"name type required description data string | File | ArrayBuffer | Uint8Array true Data to encrypt. Can be of any type specified. metadata { [key: string]: any } false Metadata in JSON format.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_5","text":"Promise<{ dataId: string, encryptedData: ArrayBuffer }> dataId can be used to delete a file using the server SDK. encryptedData can be encoded using toBase64 and toHex methods.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_2","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Either provided data or metadata has the wrong type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#encrypting_values","text":"This method encrypts only the values of a provided JavaScript object. function encryptValues ( data : { [ key : string ] : string }, noPrefix? : boolean ) : Promise < { dataId : string , encryptedData : { [ key : string ] : string } } >","title":"Encrypting values"},{"location":"api_reference/client/javascript/latest.html#parameters_6","text":"name type required description data { [key: string]: string } true An object whose values to encrypt. Both object\u2019s keys and values should be strings.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_6","text":"Promise<{ dataId: string, encryptedData: { [key: string]: string } }> dataId can be used to delete a file using the server SDK. encryptedData is a JavaScript object with encrypted values, encoded to hex encoding. Object keys are left in plain text.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_3","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. BadFormatError Provided data is not the expected type. NotEncryptabeError There are no users to encrypt the data to.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#decrypting","text":"function decrypt ( encryptedData : ArrayBuffer | Uint8Array ) : Promise < { data : string | File | Bytes , metadata : { dataType : DataType , [ key : string ] : any ; } } >","title":"Decrypting"},{"location":"api_reference/client/javascript/latest.html#parameters_7","text":"name type required description encryptedData ArrayBuffer | Uint8Array true Encrypted data to decrypt (result of encrypt method). If it was encoded, it can be decoded using fromBase64 or fromHex .","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_7","text":"Promise<{ data: string | File | ArrayBuffer | Uint8Array, metadata: { dataType: DataType, [key: string]: any; } }> type DataType = { type: 'STRING' } | { type: 'FILE', name: string } | { type: 'BYTES' } data is in format it was originally provided to the encrypt method. If not known, it can be inspected from the dataType property of the metadata.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_4","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#decrypting_values","text":"This method decrypts the encrypted values of an object encrypted using encryptValues method. function decryptValues ( encryptedData : { [ key : string ] : string }) : Promise < { data : { [ key : string ] : string } } >","title":"Decrypting values"},{"location":"api_reference/client/javascript/latest.html#parameters_8","text":"name type required description encryptedData { [key: string]: string } true An object whose values are encrypted. Result from the encryptValues method.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_8","text":"Promise<{ data: { [key: string]: string } }> data is the original data passed to encryptValues method.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_5","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server UserNotInitializedError A user is not logged into blindnet. NoAccessError A user has no access to encrypted data. EncryptionError Data could not be decrypted. Either due to wrong data format or the keys were deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#giving_access_to_a_user","text":"A user can give access to encrypted data (to which the user already has access to) to another user. function giveAccess ( userId : string ) : Promise < void >","title":"Giving access to a user"},{"location":"api_reference/client/javascript/latest.html#parameters_9","text":"name type required description userId string true Id of a user to whom access is being given.","title":"Parameters"},{"location":"api_reference/client/javascript/latest.html#return_type_9","text":"Promise<void> The operation succeeded if an exception wasn\u2019t thrown.","title":"Return type"},{"location":"api_reference/client/javascript/latest.html#errors_6","text":"type description AuthenticationError Token has expired or is invalid. Generate a new token and call refreshToken . BlindnetServiceError Error on blindnet server. UserNotFoundError A user whose id was provided as a parameter was not registered or was deleted from blindnet.","title":"Errors"},{"location":"api_reference/client/javascript/latest.html#helper_methods","text":"Blindnet SDK provides the methods to encode and decode encrypted data, so it can be easily transferred and stored. Helper methods can be imported as import { util } from '@blindnet/sdk-javascript' const { toBase64 , fromBase64 , toHex , fromHex } = util","title":"Helper methods"},{"location":"api_reference/client/javascript/latest.html#encoding","text":"Result of the encrypt method is used as a parameter in the following methods:","title":"Encoding"},{"location":"api_reference/client/javascript/latest.html#encode_to_base64_string","text":"function toBase64 ( encryptedData : ArrayBuffer ) : string","title":"Encode to base64 string"},{"location":"api_reference/client/javascript/latest.html#encode_to_hexadecimal_string","text":"function toHex ( encryptedData : ArrayBuffer ) : string","title":"Encode to hexadecimal string"},{"location":"api_reference/client/javascript/latest.html#decoding","text":"A base64 or hex encoded string can be decoded into ArrayBuffer and passed to decrypt method using the following methods:","title":"Decoding"},{"location":"api_reference/client/javascript/latest.html#decode_from_base64_string","text":"function fromBase64 ( encoded : string ) : ArrayBuffer","title":"Decode from base64 string"},{"location":"api_reference/client/javascript/latest.html#decode_from_hexadecimal_string","text":"function fromHex ( encoded : string ) : ArrayBuffer","title":"Decode from hexadecimal string"},{"location":"api_reference/server/php/0.9.2.html","text":"Installation # composer require blindnet/blindnet-sdk-php Imports # 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; Init # Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet Parameters # name type required description $appKey string true Application private key. For more information, click . $appId string true Application ID. For more information, click . $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io. For testing, use https://test.blindnet.io. Return type # Blindnet createTempUserToken # Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data, all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string Parameters # name type required description $groupId string true ID of the group for which the data is being encrypted. For more information, click . Return type # String createUserToken # Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user. $groupId string true ID of the group to which a registered user belongs. Return type # String forgetData # Deletes the encrypted data key from blindnet. function forgetData ( string $dataId ) Parameters # name type required description $dataId string true ID of a data to be deleted. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API. revokeAccess # Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to revoke access. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API. forgetUser # Deletes a user from blindnet. function forgetUser ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API. forgetGroup # Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys. function forgetGroup ( string $groupId ) : bool Parameters # name type required description $groupId string true ID of a group to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"v0.9.2"},{"location":"api_reference/server/php/0.9.2.html#installation","text":"composer require blindnet/blindnet-sdk-php","title":"Installation"},{"location":"api_reference/server/php/0.9.2.html#imports","text":"1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet;","title":"Imports"},{"location":"api_reference/server/php/0.9.2.html#init","text":"Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet","title":"Init"},{"location":"api_reference/server/php/0.9.2.html#parameters","text":"name type required description $appKey string true Application private key. For more information, click . $appId string true Application ID. For more information, click . $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io. For testing, use https://test.blindnet.io.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type","text":"Blindnet","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#createtempusertoken","text":"Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data, all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string","title":"createTempUserToken"},{"location":"api_reference/server/php/0.9.2.html#parameters_1","text":"name type required description $groupId string true ID of the group for which the data is being encrypted. For more information, click .","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_1","text":"String","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#createusertoken","text":"Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user. $groupId string true ID of the group to which a registered user belongs.","title":"createUserToken"},{"location":"api_reference/server/php/0.9.2.html#return_type_2","text":"String","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#forgetdata","text":"Deletes the encrypted data key from blindnet. function forgetData ( string $dataId )","title":"forgetData"},{"location":"api_reference/server/php/0.9.2.html#parameters_2","text":"name type required description $dataId string true ID of a data to be deleted.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_3","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/0.9.2.html#revokeaccess","text":"Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool","title":"revokeAccess"},{"location":"api_reference/server/php/0.9.2.html#parameters_3","text":"name type required description $userId string true ID of a user to revoke access.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_4","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors_1","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/0.9.2.html#forgetuser","text":"Deletes a user from blindnet. function forgetUser ( string $userId ) : bool","title":"forgetUser"},{"location":"api_reference/server/php/0.9.2.html#parameters_4","text":"name type required description $userId string true ID of a user to delete.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_5","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors_2","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/0.9.2.html#forgetgroup","text":"Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys. function forgetGroup ( string $groupId ) : bool","title":"forgetGroup"},{"location":"api_reference/server/php/0.9.2.html#parameters_5","text":"name type required description $groupId string true ID of a group to delete.","title":"Parameters"},{"location":"api_reference/server/php/0.9.2.html#return_type_6","text":"bool","title":"Return type"},{"location":"api_reference/server/php/0.9.2.html#errors_3","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html","text":"Installation # composer require blindnet/blindnet-sdk-php Imports # 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; Init # Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet Parameters # name type required description $appKey string true Application private key. For more information, click . $appId string true Application ID. For more information, click . $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io. For testing, use https://test.blindnet.io. Return type # Blindnet createTempUserToken # Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data, all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string Parameters # name type required description $groupId string true ID of the group for which the data is being encrypted. For more information, click . Return type # String createUserToken # Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user. $groupId string true ID of the group to which a registered user belongs. Return type # String forgetData # Deletes the encrypted data key from blindnet. function forgetData ( string $dataId ) Parameters # name type required description $dataId string true ID of a data to be deleted. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API. revokeAccess # Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to revoke access. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API. forgetUser # Deletes a user from blindnet. function forgetUser ( string $userId ) : bool Parameters # name type required description $userId string true ID of a user to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API. forgetGroup # Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys. function forgetGroup ( string $groupId ) : bool Parameters # name type required description $groupId string true ID of a group to delete. Return type # bool Errors # type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"latest"},{"location":"api_reference/server/php/latest.html#installation","text":"composer require blindnet/blindnet-sdk-php","title":"Installation"},{"location":"api_reference/server/php/latest.html#imports","text":"1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet;","title":"Imports"},{"location":"api_reference/server/php/latest.html#init","text":"Initializes blindnet server SDK. static function init ( string $appKey , string $appId , string $apiEndpoint = 'https://api.blindnet.io' ) : Blindnet","title":"Init"},{"location":"api_reference/server/php/latest.html#parameters","text":"name type required description $appKey string true Application private key. For more information, click . $appId string true Application ID. For more information, click . $apiEndpoint string false Endpoint of the blindnet server. Default value is https://api.blindnet.io. For testing, use https://test.blindnet.io.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type","text":"Blindnet","title":"Return type"},{"location":"api_reference/server/php/latest.html#createtempusertoken","text":"Creates a token for non-registered users of your application, usually data senders. When this token is used for encrypting data, all users that belong to a specified group will have access to the encrypted data. function createTempUserToken ( string $groupId ) : string","title":"createTempUserToken"},{"location":"api_reference/server/php/latest.html#parameters_1","text":"name type required description $groupId string true ID of the group for which the data is being encrypted. For more information, click .","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_1","text":"String","title":"Return type"},{"location":"api_reference/server/php/latest.html#createusertoken","text":"Creates a token for registered users of your application, usually data receivers. function createUserToken ( string $userId , string $groupId ) : string name type required description $userId string true ID of a registered user. $groupId string true ID of the group to which a registered user belongs.","title":"createUserToken"},{"location":"api_reference/server/php/latest.html#return_type_2","text":"String","title":"Return type"},{"location":"api_reference/server/php/latest.html#forgetdata","text":"Deletes the encrypted data key from blindnet. function forgetData ( string $dataId )","title":"forgetData"},{"location":"api_reference/server/php/latest.html#parameters_2","text":"name type required description $dataId string true ID of a data to be deleted.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_3","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html#revokeaccess","text":"Deletes all encrypted data keys of a given user. function revokeAccess ( string $userId ) : bool","title":"revokeAccess"},{"location":"api_reference/server/php/latest.html#parameters_3","text":"name type required description $userId string true ID of a user to revoke access.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_4","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors_1","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html#forgetuser","text":"Deletes a user from blindnet. function forgetUser ( string $userId ) : bool","title":"forgetUser"},{"location":"api_reference/server/php/latest.html#parameters_4","text":"name type required description $userId string true ID of a user to delete.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_5","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors_2","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"api_reference/server/php/latest.html#forgetgroup","text":"Deletes all encrypted data keys of a given user. Deletes all users that belong to the group and all their encrypted data keys. function forgetGroup ( string $groupId ) : bool","title":"forgetGroup"},{"location":"api_reference/server/php/latest.html#parameters_5","text":"name type required description $groupId string true ID of a group to delete.","title":"Parameters"},{"location":"api_reference/server/php/latest.html#return_type_6","text":"bool","title":"Return type"},{"location":"api_reference/server/php/latest.html#errors_3","text":"type description AuthenticationError Implies invalid token, which further implies invalid appKey or appId . BlindnetServiceError Implies an error in the request to blindnet API.","title":"Errors"},{"location":"guides/decrypt.html","text":"Encryption is a core feature of the blindnet SDK. Depending on the language, multiple data formats can be encrypted - strings , files or simply just byte arrays . We provide two methods to decrypt the data: decrypt and decryptValues . The following workflow is applied when decrypting data: The encrypted symmetric key of the user for the provided encrypted data is obtained from blindnet The encrypted symmetric key is decrypted using the user\u2019s secret key Data is decrypted with the symmetric key Only registered users can decrypt the data. decrypt # If the encrypted data is encoded , use the following helper methods to decode it before decrypting it. JavaScript 1 2 3 4 5 6 import { util } from '@blindnet/sdk-javascript' // if you use base64 encoding const encryptedData = util . fromBase64 ( encodedData ) // if you use hex encoding const encryptedData = util . fromHex ( encodedData ) To decrypt the data, use JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) data is the original data provided in the encrypt method. metadata is the object provided in the encrypt method. Metadata , besides the object fields provided in the encrypt method, will contain additional information on data format so it can be treated accordingly. Additional information in metadata is under the key dataType , which can have following values: { type: 'STRING' } meaning data is a string { type: 'FILE', name: string } meaning data is a file { type: 'BYTES' } meaning data is ArrayBuffer decryptValues # To decrypt the object values encrypted by the method encryptValues , use decryptValues method. JavaScript 1 const data = await blindnet . decryptValues ( encryptedData ) data is the original object passed to encryptValues method.","title":"Decrypting data"},{"location":"guides/decrypt.html#decrypt","text":"If the encrypted data is encoded , use the following helper methods to decode it before decrypting it. JavaScript 1 2 3 4 5 6 import { util } from '@blindnet/sdk-javascript' // if you use base64 encoding const encryptedData = util . fromBase64 ( encodedData ) // if you use hex encoding const encryptedData = util . fromHex ( encodedData ) To decrypt the data, use JavaScript 1 const { data , metadata } = await blindnet . decrypt ( encryptedData ) data is the original data provided in the encrypt method. metadata is the object provided in the encrypt method. Metadata , besides the object fields provided in the encrypt method, will contain additional information on data format so it can be treated accordingly. Additional information in metadata is under the key dataType , which can have following values: { type: 'STRING' } meaning data is a string { type: 'FILE', name: string } meaning data is a file { type: 'BYTES' } meaning data is ArrayBuffer","title":"decrypt"},{"location":"guides/decrypt.html#decryptvalues","text":"To decrypt the object values encrypted by the method encryptValues , use decryptValues method. JavaScript 1 const data = await blindnet . decryptValues ( encryptedData ) data is the original object passed to encryptValues method.","title":"decryptValues"},{"location":"guides/encrypt.html","text":"Encryption is a core feature of the blindnet SDK. Depending on the language, multiple data formats can be encrypted - strings , files or simply just byte arrays . We provide two methods to encrypt the data: encrypt and encryptValues . The following workflow is applied when encrypting data: A list of user ids (specified in a temporary token ) is sent to blindnet to obtain the corresponding public keys An ephemeral symmetric key is generated Data is encrypted with the symmetric key For each public key, the symmetric key is encrypted A list of encrypted symmetric keys is sent to blindnet Encryption is completed by a user of your application ( registered or unregistered ) to another registered user. A user does not need to be logged into blindnet in order to encrypt the data. Data can be encrypted for a single user, a list of users or a user group . In the current api, the encryption destination is specified in the Server SDK . To encrypt the data, the client SDK needs to be initialized with the temporary token which contains information to whom the data is encrypted (user group or a list of users). To encrypt to a different destination, a new token needs to be generated. To encrypt the data for a specific users, obtain a temporary token using the following Server SDK method: PHP 1 2 $userIds = [\u20181\u2019, \u20182\u2019, \u20183\u2019] $tempUserJwt = $blindnet->createTempUserToken($userIds); To encrypt the data for a group , obtain a temporary token using the following server SDK method: PHP 1 2 $groupId = \u20181\u2019 $tempUserJwt = $blindnet->createTempUserToken($groupId); encrypt # This method encrypts the entire data passed as a parameter. Depending on a language, multiple formats are supported. Besides the data , a metadata can be passed as a second argument. It can be any JSON serializable object . JavaScript data can be string , File , Uint8Array or ArrayBuffer Other formats should be encoded to Uint8Array or ArrayBuffer . You can put the information on how to decode the data into the metadata . 1 2 3 4 5 // pass a short term token generated in the server SDK const blindnet = Blindnet . init ( tempUserJwt ) // e.g. data is a file // const data = document.getElementById('file-picker').files[0] const { dataId , encryptedData } = await blindnet . encrypt ( data , metadata ) encryptedData has a type ArrayBuffer . Encode # To be easily transferred, encryptedData can be encoded to base64 or hexadecimal string. JavaScript 1 2 3 4 import { util } from '@blindnet/sdk-javascript' const base64Encoded = util . toBase64 ( encryptedData ) const hexEncoded = util . toHex ( encryptedData ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To decrypt encryptedData , pass it to the decrypt method. Currently, encryption of streams is not supported so the entire data is loaded into the memory and then encrypted. Make sure your application does not run out of memory if e.g. large files are passed to the encrypt method. encryptValues # To encrypt the values of a JSON like object, use the encryptValues method. Object keys are left in plain text. This method can be used to e.g. encrypt the answers to a COVID questionnaire (where questions are already known therefore not a sensitive data). JavaScript 1 2 const data = { \u2018 first_name \u2019 : \u2018 Alice \u2019 , \u2018 last_name \u2019 : \u2018 Schumacher \u2019 } const { dataId , encryptedData } = await blindnet . encryptValues ( data ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To drcrypt encryptedData , pass it to the decryptValues method.","title":"Encrypting data"},{"location":"guides/encrypt.html#encrypt","text":"This method encrypts the entire data passed as a parameter. Depending on a language, multiple formats are supported. Besides the data , a metadata can be passed as a second argument. It can be any JSON serializable object . JavaScript data can be string , File , Uint8Array or ArrayBuffer Other formats should be encoded to Uint8Array or ArrayBuffer . You can put the information on how to decode the data into the metadata . 1 2 3 4 5 // pass a short term token generated in the server SDK const blindnet = Blindnet . init ( tempUserJwt ) // e.g. data is a file // const data = document.getElementById('file-picker').files[0] const { dataId , encryptedData } = await blindnet . encrypt ( data , metadata ) encryptedData has a type ArrayBuffer .","title":"encrypt"},{"location":"guides/encrypt.html#encode","text":"To be easily transferred, encryptedData can be encoded to base64 or hexadecimal string. JavaScript 1 2 3 4 import { util } from '@blindnet/sdk-javascript' const base64Encoded = util . toBase64 ( encryptedData ) const hexEncoded = util . toHex ( encryptedData ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To decrypt encryptedData , pass it to the decrypt method. Currently, encryption of streams is not supported so the entire data is loaded into the memory and then encrypted. Make sure your application does not run out of memory if e.g. large files are passed to the encrypt method.","title":"Encode"},{"location":"guides/encrypt.html#encryptvalues","text":"To encrypt the values of a JSON like object, use the encryptValues method. Object keys are left in plain text. This method can be used to e.g. encrypt the answers to a COVID questionnaire (where questions are already known therefore not a sensitive data). JavaScript 1 2 const data = { \u2018 first_name \u2019 : \u2018 Alice \u2019 , \u2018 last_name \u2019 : \u2018 Schumacher \u2019 } const { dataId , encryptedData } = await blindnet . encryptValues ( data ) dataId and encryptedData should be stored by you. dataId is used to delete the keys from blindnet using the server SDK. To drcrypt encryptedData , pass it to the decryptValues method.","title":"encryptValues"},{"location":"guides/installation.html","text":"The following programming languages are currently supported: Client SDK: JavaScript Server SDK: PHP Installation # Client SDK # Javascript Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > For more info, check the api reference . Server SDK # PHP composer require blindnet/blindnet-sdk-php For more info, check the api reference . Imports # Client SDK # The blindnet SDK api is enclosed in the Blindnet module. It should be imported together with the error types and optionally, utilities (e.g. to encode and decode the encrypted data). Javascript If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet For more info, check the api reference . Server SDK # PHP 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; For more info, check the api reference . Initialization # Client SDK # Blindnet SDK must be initialized before you can use it (with the exception for some static methods, e.g. secret derivation ). To initialize the library, you need to provide the authentication token generated using the server SDK . Also, blindnet endpoint url can be provided. The default value is https://api.blindnet.io . If you are testing the library, use https://test.blindnet.io . Initialization is done with the init method. JavaScript 1 2 3 const blindnet = Blindnet . init ( token ) // for testing const blindnet = Blindnet . init ( token , 'https://test.blindnet.io' ) Server SDK # To initialize the server SDK, you need to obtain application id and application key . You can obtain them from the dashboard . As for the client SDK, you can provide an endpoint. For testing, use https://test.blindnet.io . PHP 1 2 3 $blindnet=Blindnet.init($appKey, $appId) // for testing $blindnet=Blindnet.init($appKey, $appId, 'https://test.blindnet.io')","title":"Installation"},{"location":"guides/installation.html#installation","text":"","title":"Installation"},{"location":"guides/installation.html#client_sdk","text":"Javascript Pick one of the following methods to install the blindnet SDK. npm Run the following command in your terminal. npm i -S @blindnet/sdk-javascript yarn Run the following command in your terminal. yarn add @blindnet/sdk-javascript umd Download the umd file and include it in your HTML file. File can be downloaded here . < script src = \"blindnet.umd.js\" ></ script > For more info, check the api reference .","title":"Client SDK"},{"location":"guides/installation.html#server_sdk","text":"PHP composer require blindnet/blindnet-sdk-php For more info, check the api reference .","title":"Server SDK"},{"location":"guides/installation.html#imports","text":"","title":"Imports"},{"location":"guides/installation.html#client_sdk_1","text":"The blindnet SDK api is enclosed in the Blindnet module. It should be imported together with the error types and optionally, utilities (e.g. to encode and decode the encrypted data). Javascript If the SDK was installed as an npm package, it is imported as import { Blindnet , util , error } from '@blindnet/sdk-javascript' If it was imported as an umd package, use const { Blindnet , util , error } = blindnet For more info, check the api reference .","title":"Client SDK"},{"location":"guides/installation.html#server_sdk_1","text":"PHP 1 2 require 'vendor/autoload.php'; use Blindnet\\BlindnetSDKPHP\\Blindnet; For more info, check the api reference .","title":"Server SDK"},{"location":"guides/installation.html#initialization","text":"","title":"Initialization"},{"location":"guides/installation.html#client_sdk_2","text":"Blindnet SDK must be initialized before you can use it (with the exception for some static methods, e.g. secret derivation ). To initialize the library, you need to provide the authentication token generated using the server SDK . Also, blindnet endpoint url can be provided. The default value is https://api.blindnet.io . If you are testing the library, use https://test.blindnet.io . Initialization is done with the init method. JavaScript 1 2 3 const blindnet = Blindnet . init ( token ) // for testing const blindnet = Blindnet . init ( token , 'https://test.blindnet.io' )","title":"Client SDK"},{"location":"guides/installation.html#server_sdk_2","text":"To initialize the server SDK, you need to obtain application id and application key . You can obtain them from the dashboard . As for the client SDK, you can provide an endpoint. For testing, use https://test.blindnet.io . PHP 1 2 3 $blindnet=Blindnet.init($appKey, $appId) // for testing $blindnet=Blindnet.init($appKey, $appId, 'https://test.blindnet.io')","title":"Server SDK"},{"location":"guides/introduction.html","text":"Blindnet SDK consists of client-side and server-side libraries for different languages and platforms. Server-side SDK is used mainly for user authentication in blindnet by providing the api to generate the authentication tokens . Additionally, you can use it to delete users and encryption keys of your application. Client-side SDK is used for encryption and decryption of the data shared between users of your application. Other functionalities are e.g. sharing the encrypted data with other users. In order to integrate blindnet to your application: You need to integrate both client-side and server-side SDKs . You need a way to authenticate the users in your application. Users in blindnet are identified by a unique identifier which is generated on your side. User\u2019s unique identifier is a part of the authentication token. You need to maintain the authenticated sessions with blindnet on the client-side for every user using the blindnet api. A session is identified by an authentication token generated by the server-side SDK and passed to the client-side . Tokens have an expiry time so make sure to generate new ones after they expire.","title":"Introduction"},{"location":"guides/managing_users_access.html","text":"You can manage your users\u2019 interaction with blindnet and their access to data through blindnet SDK methods that you invoke in your application. These methods allow you to connect your users to blindnet cluster users in groups give/revoke access to data update user passwords etc. Creating user tokens # Each request to blindnet needs to be authenticated, which is done through user tokens. You generate user tokens on your server by using blindnet server SDK , and then pass the generated token in the initialisation of blindnet client SDK . To generate a user token, after initialising blindnet server SDK call the following blindnet Server SDK method: PHP 1 2 3 $userId = 'your_user_id'; $groupId = 'your_user_group_id'; $userToken = $blindnet->createUserToken($userId, $groupId); Creating temporary tokens # Temporary tokens are used to authenticate when encrypting the data. They contain the information to whom the data is being encrypted. PHP 1 2 $groupId = 'your_user_group_id'; $userToken = $blindnet->createTempUserToken($groupId); Assigning a user to a group # Each of your users can belong to one user group or no group at all. For example, if your platform users are employees of a hotel or bank, you can group your users (employees) with respect to the hotel or bank they work with (group). You associate a user to a group by specifying the group ID in a user token when connecting a user to blindnet for the first time. Currently, you can't assign already created user to a different group. Delete the user and create it again with a different group id . Connecting users with blindnet # The core of security of blindnet are user\u2019s private keys. They are randomly generated on the user\u2019s local device and encrypted using a secret code (e.g. user\u2019s password) and then securely stored in blindnet. Blindnet allows you to reuse existing user passwords so that your users still use one password in your application. To do so safely, you need to use blindnet SDK to split user passwords before you connect a user to blindnet. Splitting passwords # Splitting user's password In the case that you send plaintext passwords to your server for user authentication, we advise that you update the authentication workflow in the following way. When a user is logging into your application and enters a password, you should use blindnet SDK to split the password into two parts: you use the second part ( appSecret ) to authenticate the user on your app, while you use the first part (( blindnetSecret ) for registering and logging users to blindnet. It is advisable not to use the same password for both actions since a party that can read the user's password (i.e., you) would be able to decrypt the user's private keys. To split the password use the following Client SDK method: JavaScript 1 2 const password = ' user_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( password ) Registering and logging users in blindnet # When a user logs into your system, you also need to login that user to blindnet. To do so, you first obtain blindnet secret by splitting user password , and then use the following Client SDK method: JavaScript await blindnet . connect ( blindnetSecret ) Blindnet SDK does not expose separate methods for user registration and logging in. You always use the connect method while its internals handle user registration and logging in. If it is the first time that a user is being connected to blindnet, the SDK will register that user by using the information you provide in a token . Logging out users # When a user logs out of your application, you also need to log out that user from blindnet by using the following Client SDK method: JavaScript await blindnet . disconnect () This will remove the user's private keys from the user's local device. Changing secrets # Since user's keys are encrypted with the user's secret , changing the secret means the keys must be re-encrypted with the new secret value. Your users can change their passwords in your applications at any time without losing access to previously encrypted data. To ensure that access is not lost, when your user changes password, split the new password and use the corresponding Client SDK method: JavaScript 1 2 3 const newPassword = ' user_new_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( newPassword ) await blindnet . changeSecret ( blindnetSecret ) This will re-encrypt the user\u2019s private keys with the new secret and post them to blindnet. Giving access to other users # A user (Alice) can give access to encrypted data to another user (Bob). It means Alice will download her encrypted data keys and re-encrypt them with Bob's public key . This way Bob can download and decrypt the keys with his private key . Possible use-case for this is when a new user registers to blindnet and needs an access to e.g. customers' data. Think of a new hotel employee accessing guest's encrypted passport during check-in. Currently, Alice give access all the data for which she has the keys. To give access to other user, use the following Client SDK method: JavaScript 1 2 const userId = ' id_of_user_to_give_acces_to \u2019 blindnet . giveAccess ( userId ) Lost secret # When a user loses the secret (forgets the login password), the user loses access to the encrypted data since they are unable to decrypt the keys used to encrypt the data. You need to put in place the following workflow Delete the user from blindnet. Log-in the user to blindnet with a new secret. After the user has logged-in, another user must give them access to the encrypted data. Warning If no other user has an access to a particular data when the secret is lost, no one will be able to decrypt the data. Revoking user access # Revoking an access to a user means the user will lose all the keys necessary to decrypt the data and consequently, lose access to data. Your server should inform blindnet about a user for which the access is being revoked, by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_revoke_access'; $blindnet->revokeAccess($userId); In the situation where all users in a user group always have access to all the data, this action is not meaningful and deletion of users should be performed instead. Deleting encrypted data keys # When data is deleted from your server, it's encrypted keys should be deleted from blindnet. User the following Server SDK method to delete the keys: PHP 1 2 $dataId = 'id_of_deleted_data'; $blindnet->forgetData($dataId); Deleting users # When a user is deleted from your application, you must inform blindnet about the event. This is done from your server by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_delete'; $blindnet->forgetUser($userId); Deleting a user from blindnet implies that the deleted user will no longer be able to decrypt any data, and other users will no longer be able to encrypt data for that user. When deleting users, you must be careful not to delete the last user of a group because in that case all existing data will become undecryptable. Deleting the last user has the same effect as deleting a user group . Deleting user groups # To delete a user group , use the following blindnet Server SDK method: PHP 1 2 $groupId = 'id_of_group_to_delete'; $blindnet->forgetGroup($groupId); Deleting a user group in blindnet system implies deleting all its users and encrypted keys from blindnet. This means that encrypted data of this group stored on your servers will not be decryptable anymore.","title":"Managing users and access"},{"location":"guides/managing_users_access.html#creating_user_tokens","text":"Each request to blindnet needs to be authenticated, which is done through user tokens. You generate user tokens on your server by using blindnet server SDK , and then pass the generated token in the initialisation of blindnet client SDK . To generate a user token, after initialising blindnet server SDK call the following blindnet Server SDK method: PHP 1 2 3 $userId = 'your_user_id'; $groupId = 'your_user_group_id'; $userToken = $blindnet->createUserToken($userId, $groupId);","title":"Creating user tokens"},{"location":"guides/managing_users_access.html#creating_temporary_tokens","text":"Temporary tokens are used to authenticate when encrypting the data. They contain the information to whom the data is being encrypted. PHP 1 2 $groupId = 'your_user_group_id'; $userToken = $blindnet->createTempUserToken($groupId);","title":"Creating temporary tokens"},{"location":"guides/managing_users_access.html#assigning_a_user_to_a_group","text":"Each of your users can belong to one user group or no group at all. For example, if your platform users are employees of a hotel or bank, you can group your users (employees) with respect to the hotel or bank they work with (group). You associate a user to a group by specifying the group ID in a user token when connecting a user to blindnet for the first time. Currently, you can't assign already created user to a different group. Delete the user and create it again with a different group id .","title":"Assigning a user to a group"},{"location":"guides/managing_users_access.html#connecting_users_with_blindnet","text":"The core of security of blindnet are user\u2019s private keys. They are randomly generated on the user\u2019s local device and encrypted using a secret code (e.g. user\u2019s password) and then securely stored in blindnet. Blindnet allows you to reuse existing user passwords so that your users still use one password in your application. To do so safely, you need to use blindnet SDK to split user passwords before you connect a user to blindnet.","title":"Connecting users with blindnet"},{"location":"guides/managing_users_access.html#splitting_passwords","text":"Splitting user's password In the case that you send plaintext passwords to your server for user authentication, we advise that you update the authentication workflow in the following way. When a user is logging into your application and enters a password, you should use blindnet SDK to split the password into two parts: you use the second part ( appSecret ) to authenticate the user on your app, while you use the first part (( blindnetSecret ) for registering and logging users to blindnet. It is advisable not to use the same password for both actions since a party that can read the user's password (i.e., you) would be able to decrypt the user's private keys. To split the password use the following Client SDK method: JavaScript 1 2 const password = ' user_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( password )","title":"Splitting passwords"},{"location":"guides/managing_users_access.html#registering_and_logging_users_in_blindnet","text":"When a user logs into your system, you also need to login that user to blindnet. To do so, you first obtain blindnet secret by splitting user password , and then use the following Client SDK method: JavaScript await blindnet . connect ( blindnetSecret ) Blindnet SDK does not expose separate methods for user registration and logging in. You always use the connect method while its internals handle user registration and logging in. If it is the first time that a user is being connected to blindnet, the SDK will register that user by using the information you provide in a token .","title":"Registering and logging users in blindnet"},{"location":"guides/managing_users_access.html#logging_out_users","text":"When a user logs out of your application, you also need to log out that user from blindnet by using the following Client SDK method: JavaScript await blindnet . disconnect () This will remove the user's private keys from the user's local device.","title":"Logging out users"},{"location":"guides/managing_users_access.html#changing_secrets","text":"Since user's keys are encrypted with the user's secret , changing the secret means the keys must be re-encrypted with the new secret value. Your users can change their passwords in your applications at any time without losing access to previously encrypted data. To ensure that access is not lost, when your user changes password, split the new password and use the corresponding Client SDK method: JavaScript 1 2 3 const newPassword = ' user_new_password \u2019 const { blindnetSecret , appSecret } = await Blindnet . deriveSecrets ( newPassword ) await blindnet . changeSecret ( blindnetSecret ) This will re-encrypt the user\u2019s private keys with the new secret and post them to blindnet.","title":"Changing secrets"},{"location":"guides/managing_users_access.html#giving_access_to_other_users","text":"A user (Alice) can give access to encrypted data to another user (Bob). It means Alice will download her encrypted data keys and re-encrypt them with Bob's public key . This way Bob can download and decrypt the keys with his private key . Possible use-case for this is when a new user registers to blindnet and needs an access to e.g. customers' data. Think of a new hotel employee accessing guest's encrypted passport during check-in. Currently, Alice give access all the data for which she has the keys. To give access to other user, use the following Client SDK method: JavaScript 1 2 const userId = ' id_of_user_to_give_acces_to \u2019 blindnet . giveAccess ( userId )","title":"Giving access to other users"},{"location":"guides/managing_users_access.html#lost_secret","text":"When a user loses the secret (forgets the login password), the user loses access to the encrypted data since they are unable to decrypt the keys used to encrypt the data. You need to put in place the following workflow Delete the user from blindnet. Log-in the user to blindnet with a new secret. After the user has logged-in, another user must give them access to the encrypted data. Warning If no other user has an access to a particular data when the secret is lost, no one will be able to decrypt the data.","title":"Lost secret"},{"location":"guides/managing_users_access.html#revoking_user_access","text":"Revoking an access to a user means the user will lose all the keys necessary to decrypt the data and consequently, lose access to data. Your server should inform blindnet about a user for which the access is being revoked, by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_revoke_access'; $blindnet->revokeAccess($userId); In the situation where all users in a user group always have access to all the data, this action is not meaningful and deletion of users should be performed instead.","title":"Revoking user access"},{"location":"guides/managing_users_access.html#deleting_encrypted_data_keys","text":"When data is deleted from your server, it's encrypted keys should be deleted from blindnet. User the following Server SDK method to delete the keys: PHP 1 2 $dataId = 'id_of_deleted_data'; $blindnet->forgetData($dataId);","title":"Deleting encrypted data keys"},{"location":"guides/managing_users_access.html#deleting_users","text":"When a user is deleted from your application, you must inform blindnet about the event. This is done from your server by using the following blindnet Server SDK method: PHP 1 2 $userId = 'id_of_user_to_delete'; $blindnet->forgetUser($userId); Deleting a user from blindnet implies that the deleted user will no longer be able to decrypt any data, and other users will no longer be able to encrypt data for that user. When deleting users, you must be careful not to delete the last user of a group because in that case all existing data will become undecryptable. Deleting the last user has the same effect as deleting a user group .","title":"Deleting users"},{"location":"guides/managing_users_access.html#deleting_user_groups","text":"To delete a user group , use the following blindnet Server SDK method: PHP 1 2 $groupId = 'id_of_group_to_delete'; $blindnet->forgetGroup($groupId); Deleting a user group in blindnet system implies deleting all its users and encrypted keys from blindnet. This means that encrypted data of this group stored on your servers will not be decryptable anymore.","title":"Deleting user groups"},{"location":"other/glossary.html","text":"app id app key token session client sdk server sdk testing endpoint secret value password splitting registered user anonimous user user groups data metadata","title":"Glossary"},{"location":"other/qna.html","text":"What is End-to-end Encryption? # End-to-end encryption is an approach in which a software system encrypts data upon capture, supports encryption throughout transfer, and allows for data decrypting only at the endpoint of their consumption. In such a way user data is not accessible in the non-encrypted form at any central entity. Encryption is a process of converting a readable dataset into code in order to prevent unauthorized access. End-to-end encryption is a functionality in which a software system protects the data through its entire life cycle, from end-point capture and transit to storage and access.The intent of end-to-end encryption is to ensure that data is available only to authorized users and unreadable to anyone else. The classic client-server architecture of internet software applications introduced the idea of centralized data storage on cloud or on-prem servers, while keeping software running on endpoints (i.e. the interfaces through which the users interact with the system), light in functionality, often reduced to data display and data entry. While convenient, this approach rests on the exposure of mass quantities of confidential user information to both data breaches (external threats) and misuse (internal threats). Due to growing concerns for user privacy, end-to-end encryption quickly gained ground over the last decade . Signal protocol has been recognized as a golden standard in the developer community. It is used across various applications, including widely popular WhatsApp. Through Signal protocol, users\u2019 messages are encrypted on their devices and exchanged with other users without the ability for the central entity to decrypt and access those messages. . The cryptographic primitives are exchanged in such a way that only the endpoints (sender and receiver) have access to the necessary decryption keys. End-to-end encryption is currently spreading to various other businesses, augmenting the classic client-server architecture, and allowing developers to make privacy-first software in many other use-cases. Blindnet offers a simple solution to developers to embed end-to-end encryption in their software architecture, protect user data and limit exposure and liabilities to only critical sensitive information. Why do I need End-to-end Encryption # Fulfil users expectations and earn their trust . When users provide their personal and often sensitive information to a third-party , they assume that the data will remain private, confidential and protected. 1. Reduce liability in case of a breach . In case of a breach, if an intruder gets hold of user data, they won\u2019t be able to benefit from it if you only store and transmit encrypted data. At the current rate breaches happen every 39 seconds 1 . Yep, you read it correctly. Comply with regulations . Depending on the location of your users (European, Californian, etc.) you are likely to be subject to regulation such as GDPR and CCPA imposing high standards in terms of user data privacy protection. Encrypting data, end-to-end, will meet compliance standards with regards to such regulations. In short, there is no excuse not to protect user data. With blindnet, your application can ensure the highest level of integrity every time you retain or access sensitive information. In other words, whenever you process data that your service is not exploiting to generate value, keeping it unencrypted makes it only a liability for you. Is blindnet a Trusted Third Party? # No. blindnet does not nor will ever have access to the data that transmits through its network. Therefore, we are a zero-trust third party. We constructed our services to ensure that user data stays protected, end-to-end. A Trusted Third Party is a software provider that has an ability to store, access or read user data. . You have to trust that they will do nothing to compromise the data you have provided. However, one can never be too cautious. At blindnet, we believe that internet users deserve better than to be at the mercy of a Trusted Third Party. Our goal is to break from this retrograde model, and offer a technological solution, such that blindnet (and in many cases even your client systems too) has no way of decrypting and reading the actual user data. You don\u2019t need to trust that blindnet will not read and misuse your users\u2019 data, because we simply can\u2019t. You can also go and inspect our source code on github, and make sure that our implementations are consistent with this core promise. If I use blindnet, will I be GDPR-compliant (EU)? # Yes. The Article 32 of GDPR requires everyone who processes user information to apply appropriate techniques of protection; encryption being one of them. blindnet is designed to offer protection for even the most sensitive data, as it offers end-to-end encryption. However, in addition to security of data transfers, GDPR grants users many additional rights. Using blindnet is not a guarantee that your system will be compliant with this regulation in all other aspects. Being a software company, we also do not offer any legal advice, but we can strongly recommend that you have your data treatment practices reviewed by a lawyer. If I use blindnet, will I be HIPAA-compliant (USA)? # If I use blindnet, will I be HDS-compliant(FR)? # Yes. First blindnet helps you store encrypted information. Even medical information, in its encrypted form, can not officially be considered medical information since the content bears no semantics in that particular form. However, blindnet does use HDS-compliant cloud storage providers, just to be safe. If you have any questions, or you want to use blindent on a particular cloud storage that you prefer, please get in touch with our support team. \"At the end of 2016, a business fell victim to a ransomware attack every 40 seconds. Cybersecurity Ventures predicts that will rise to every 14 seconds by 2019 \u2014 and every 11 seconds by 2021\". Cybersecurity Ventures report A Clark School study is one of the first to quantify the near-constant rate of hacker attacks of computers with Internet access\u2014every 39 seconds on average\u2014and the non-secure usernames and passwords we use that give attackers more chance of success. Study \u21a9","title":"Q&A"},{"location":"other/qna.html#what_is_end-to-end_encryption","text":"End-to-end encryption is an approach in which a software system encrypts data upon capture, supports encryption throughout transfer, and allows for data decrypting only at the endpoint of their consumption. In such a way user data is not accessible in the non-encrypted form at any central entity. Encryption is a process of converting a readable dataset into code in order to prevent unauthorized access. End-to-end encryption is a functionality in which a software system protects the data through its entire life cycle, from end-point capture and transit to storage and access.The intent of end-to-end encryption is to ensure that data is available only to authorized users and unreadable to anyone else. The classic client-server architecture of internet software applications introduced the idea of centralized data storage on cloud or on-prem servers, while keeping software running on endpoints (i.e. the interfaces through which the users interact with the system), light in functionality, often reduced to data display and data entry. While convenient, this approach rests on the exposure of mass quantities of confidential user information to both data breaches (external threats) and misuse (internal threats). Due to growing concerns for user privacy, end-to-end encryption quickly gained ground over the last decade . Signal protocol has been recognized as a golden standard in the developer community. It is used across various applications, including widely popular WhatsApp. Through Signal protocol, users\u2019 messages are encrypted on their devices and exchanged with other users without the ability for the central entity to decrypt and access those messages. . The cryptographic primitives are exchanged in such a way that only the endpoints (sender and receiver) have access to the necessary decryption keys. End-to-end encryption is currently spreading to various other businesses, augmenting the classic client-server architecture, and allowing developers to make privacy-first software in many other use-cases. Blindnet offers a simple solution to developers to embed end-to-end encryption in their software architecture, protect user data and limit exposure and liabilities to only critical sensitive information.","title":"What is End-to-end Encryption?"},{"location":"other/qna.html#why_do_i_need_end-to-end_encryption","text":"Fulfil users expectations and earn their trust . When users provide their personal and often sensitive information to a third-party , they assume that the data will remain private, confidential and protected. 1. Reduce liability in case of a breach . In case of a breach, if an intruder gets hold of user data, they won\u2019t be able to benefit from it if you only store and transmit encrypted data. At the current rate breaches happen every 39 seconds 1 . Yep, you read it correctly. Comply with regulations . Depending on the location of your users (European, Californian, etc.) you are likely to be subject to regulation such as GDPR and CCPA imposing high standards in terms of user data privacy protection. Encrypting data, end-to-end, will meet compliance standards with regards to such regulations. In short, there is no excuse not to protect user data. With blindnet, your application can ensure the highest level of integrity every time you retain or access sensitive information. In other words, whenever you process data that your service is not exploiting to generate value, keeping it unencrypted makes it only a liability for you.","title":"Why do I need End-to-end Encryption"},{"location":"other/qna.html#is_blindnet_a_trusted_third_party","text":"No. blindnet does not nor will ever have access to the data that transmits through its network. Therefore, we are a zero-trust third party. We constructed our services to ensure that user data stays protected, end-to-end. A Trusted Third Party is a software provider that has an ability to store, access or read user data. . You have to trust that they will do nothing to compromise the data you have provided. However, one can never be too cautious. At blindnet, we believe that internet users deserve better than to be at the mercy of a Trusted Third Party. Our goal is to break from this retrograde model, and offer a technological solution, such that blindnet (and in many cases even your client systems too) has no way of decrypting and reading the actual user data. You don\u2019t need to trust that blindnet will not read and misuse your users\u2019 data, because we simply can\u2019t. You can also go and inspect our source code on github, and make sure that our implementations are consistent with this core promise.","title":"Is blindnet a Trusted Third Party?"},{"location":"other/qna.html#if_i_use_blindnet_will_i_be_gdpr-compliant_eu","text":"Yes. The Article 32 of GDPR requires everyone who processes user information to apply appropriate techniques of protection; encryption being one of them. blindnet is designed to offer protection for even the most sensitive data, as it offers end-to-end encryption. However, in addition to security of data transfers, GDPR grants users many additional rights. Using blindnet is not a guarantee that your system will be compliant with this regulation in all other aspects. Being a software company, we also do not offer any legal advice, but we can strongly recommend that you have your data treatment practices reviewed by a lawyer.","title":"If I use blindnet, will I be GDPR-compliant (EU)?"},{"location":"other/qna.html#if_i_use_blindnet_will_i_be_hipaa-compliant_usa","text":"","title":"If I use blindnet, will I be HIPAA-compliant (USA)?"},{"location":"other/qna.html#if_i_use_blindnet_will_i_be_hds-compliantfr","text":"Yes. First blindnet helps you store encrypted information. Even medical information, in its encrypted form, can not officially be considered medical information since the content bears no semantics in that particular form. However, blindnet does use HDS-compliant cloud storage providers, just to be safe. If you have any questions, or you want to use blindent on a particular cloud storage that you prefer, please get in touch with our support team. \"At the end of 2016, a business fell victim to a ransomware attack every 40 seconds. Cybersecurity Ventures predicts that will rise to every 14 seconds by 2019 \u2014 and every 11 seconds by 2021\". Cybersecurity Ventures report A Clark School study is one of the first to quantify the near-constant rate of hacker attacks of computers with Internet access\u2014every 39 seconds on average\u2014and the non-secure usernames and passwords we use that give attackers more chance of success. Study \u21a9","title":"If I use blindnet, will I be HDS-compliant(FR)?"},{"location":"troubleshooting/index.html","text":"Error reference # Client SDK # Javascript Server SDK #","title":"Troubleshooting"},{"location":"troubleshooting/index.html#error_reference","text":"","title":"Error reference"},{"location":"troubleshooting/index.html#client_sdk","text":"Javascript","title":"Client SDK"},{"location":"troubleshooting/index.html#server_sdk","text":"","title":"Server SDK"},{"location":"troubleshooting/error_reference/client/javascript.html","text":"Errors can arise during the usage of the blindnet SDK and should be handled accordingly. Error types can be imported as: 1 import { error as blindnetError } from '@blindnet/sdk-javascript' and handled the following way 1 2 3 4 5 6 7 8 try { await blindnet . decrypt ( data ) } catch ( e ) { if ( e instanceof blindnetError . AuthenticationError ) { const newToken = await getToken () // your function to obtain token blindnet . refreshToken ( newToken ) } else if ( e instanceof blindnetError . NoAccessError ) // notify the user about the problem } or 1 2 3 4 5 6 7 blindnet . decrypt ( data ). catch ( async e => { if ( e instanceof blindnetError . AuthenticationError ) { const newToken = await getToken () // your function to obtain token blindnet . refreshToken ( newToken ) } else if ( e instanceof blindnetError . NoAccessError ) // notify the user about the problem }) This page describes the different types of errors that can arise in the blindnet SDK. AuthenticationError # explanation : Token is invalid or has expired. api methods : All SDK methods except init, deriveSecrets and disconnect solution : Generate a new token on the backend and pass it to the console. UserNotInitializedError # explanation : User\u2019s keys are missing from the browser's IndexedDB. This means either the user is not registered in blindnet or the keys have been manually deleted. api methods : decrypt , decryptValues , changeSecret , giveAccess solution : Call connect method to get the keys. PasswordError # explanation : Wrong password is provided. The secret is different from the one provided when a user has registered or changed it so stored encrypted keys can\u2019t be decrypted. where : connect EncryptionError # explanation : Encrypted data can\u2019t be decrypted. This means either the encrypted data or the encrypted data key has been tampered with, or the wrong encrypted data or data id has been provided. api methods : decrypt , decryptValues BlindnetServiceError explanation : Unexpected error occurred. Either the SDK wasn\u2019t able to reach the blindnet server or there was an error on the server. api methods : all SDK methods except init, deriveSecrets and disconnect . solution : Retry the method call NotEncryptableError # explanation : Data can\u2019t be encrypted. A user group or empty or no user id was passed to generate a token. api methods : encrypt , encryptValues solution : Add users to the group or generate a token with non-empty user id list. NoAccessError # explanation : A user can\u2019t decrypt the data. A user is missing the encryption keys for the encrypted data. api methods : decrypt , decryptValues solution : Another user with access has to give her the access with the method giveAccess. UserNotFoundError # explanation : A user who is being given access to a document is not registered into blindnet api methods : giveAccess , changeSecret solution : The user being given access to has to register to blindnet using the connect method. BadFormatError # explanation : Format of data or metadata passed to encrypting methods is not in the supported format. api methods : encrypt , encryptValues solution : Check the supported formats and convert the data accordingly. Firefox problem with IndexedDB. # explanation : Firefox doesn\u2019t support IndexedDB in private browsing mode. Uncaught (in promise) DOMException: A mutation operation was attempted on a database that did not allow mutations is returned. solution : Warn a user not to use the private browsing mode on Firefox. IE problem. # explanation : Internet explorer has very limited support for web crypto api so the blindnet SDK doesn\u2019t work on it. solution : Warn a user to use a different browser.","title":"JavaScript"},{"location":"troubleshooting/error_reference/client/javascript.html#authenticationerror","text":"explanation : Token is invalid or has expired. api methods : All SDK methods except init, deriveSecrets and disconnect solution : Generate a new token on the backend and pass it to the console.","title":"AuthenticationError"},{"location":"troubleshooting/error_reference/client/javascript.html#usernotinitializederror","text":"explanation : User\u2019s keys are missing from the browser's IndexedDB. This means either the user is not registered in blindnet or the keys have been manually deleted. api methods : decrypt , decryptValues , changeSecret , giveAccess solution : Call connect method to get the keys.","title":"UserNotInitializedError"},{"location":"troubleshooting/error_reference/client/javascript.html#passworderror","text":"explanation : Wrong password is provided. The secret is different from the one provided when a user has registered or changed it so stored encrypted keys can\u2019t be decrypted. where : connect","title":"PasswordError"},{"location":"troubleshooting/error_reference/client/javascript.html#encryptionerror","text":"explanation : Encrypted data can\u2019t be decrypted. This means either the encrypted data or the encrypted data key has been tampered with, or the wrong encrypted data or data id has been provided. api methods : decrypt , decryptValues BlindnetServiceError explanation : Unexpected error occurred. Either the SDK wasn\u2019t able to reach the blindnet server or there was an error on the server. api methods : all SDK methods except init, deriveSecrets and disconnect . solution : Retry the method call","title":"EncryptionError"},{"location":"troubleshooting/error_reference/client/javascript.html#notencryptableerror","text":"explanation : Data can\u2019t be encrypted. A user group or empty or no user id was passed to generate a token. api methods : encrypt , encryptValues solution : Add users to the group or generate a token with non-empty user id list.","title":"NotEncryptableError"},{"location":"troubleshooting/error_reference/client/javascript.html#noaccesserror","text":"explanation : A user can\u2019t decrypt the data. A user is missing the encryption keys for the encrypted data. api methods : decrypt , decryptValues solution : Another user with access has to give her the access with the method giveAccess.","title":"NoAccessError"},{"location":"troubleshooting/error_reference/client/javascript.html#usernotfounderror","text":"explanation : A user who is being given access to a document is not registered into blindnet api methods : giveAccess , changeSecret solution : The user being given access to has to register to blindnet using the connect method.","title":"UserNotFoundError"},{"location":"troubleshooting/error_reference/client/javascript.html#badformaterror","text":"explanation : Format of data or metadata passed to encrypting methods is not in the supported format. api methods : encrypt , encryptValues solution : Check the supported formats and convert the data accordingly.","title":"BadFormatError"},{"location":"troubleshooting/error_reference/client/javascript.html#firefox_problem_with_indexeddb","text":"explanation : Firefox doesn\u2019t support IndexedDB in private browsing mode. Uncaught (in promise) DOMException: A mutation operation was attempted on a database that did not allow mutations is returned. solution : Warn a user not to use the private browsing mode on Firefox.","title":"Firefox problem with IndexedDB."},{"location":"troubleshooting/error_reference/client/javascript.html#ie_problem","text":"explanation : Internet explorer has very limited support for web crypto api so the blindnet SDK doesn\u2019t work on it. solution : Warn a user to use a different browser.","title":"IE problem."}]}; var __search = { index: Promise.resolve(local_index) }