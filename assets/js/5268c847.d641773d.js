"use strict";(self.webpackChunkblindnet_dev=self.webpackChunkblindnet_dev||[]).push([[290],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(r),d=a,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||i;return r?n.createElement(m,o(o({ref:t},l),{},{components:r})):n.createElement(m,o({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2499:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],c={title:"PRIV",sidebar_position:7,tags:["high-level"]},s="Privacy Request Interchange Vocabulary",u={unversionedId:"references/PRIV",id:"references/PRIV",title:"PRIV",description:'PRIV (short for "Privacy Request Interchange Vocabulary") is defined as a "working draft" standard on GitHub via a main RFC document and several complementary documents in blindnet-io/product-management > /refs/schemas/.',source:"@site/docs/08-references/07-PRIV.md",sourceDirName:"08-references",slug:"/references/PRIV",permalink:"/docs/references/PRIV",draft:!1,editUrl:"https://github.com/blindnet-io/blindnet.dev/edit/main/docs/08-references/07-PRIV.md",tags:[{label:"high-level",permalink:"/docs/tags/high-level"}],version:"current",sidebarPosition:7,frontMatter:{title:"PRIV",sidebar_position:7,tags:["high-level"]},sidebar:"tutorialSidebar",previous:{title:"blindnet devkit Architecture",permalink:"/docs/references/architecture"},next:{title:"White Papers",permalink:"/docs/references/white-papers"}},l={},p=[],f={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"privacy-request-interchange-vocabulary"},"Privacy Request Interchange Vocabulary"),(0,i.kt)("p",null,'PRIV (short for "Privacy Request Interchange Vocabulary") is defined as a "working draft" standard on GitHub via ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/blindnet-io/product-management/blob/main/refs/schemas/priv/RFC-PRIV.md"},"a main RFC document")," and several complementary documents in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blindnet-io/product-management/tree/main/refs/schemas"},"blindnet-io/product-management > /refs/schemas/"),"."),(0,i.kt)("p",null,"It is a proposal for a simple vocabulary representing ",(0,i.kt)("a",{parentName:"p",href:"./high-level-conceptualization#data-capture--privacy-requests"},"Privacy Requests")," for interoperability."))}d.isMDXComponent=!0}}]);